<title>Batch Application Screen Layout</title>

The Batch Application screen is divided into three main work areas: the Tree View, the Logic View, and the Compiler/Message View, as shown below:

<center><image screenbatch_init.jpg /></center>

<subheader>Tree View</subheader>

The left half of the screen displays the <link batch_edit_tree.csdoc>batch edit tree</link> with the root node, <image btchfile.jpg /> MyBatchEdit, selected.

<subheader>Logic View</subheader>

The upper right portion of the screen is where the programmer develops any desired logic. It is up to the programmer to determine the correct placement and sequence of execution for each logical element. As shown in the screenshot above, the initial logic window will display:

<logic>
// Application 'MYBATCHEDIT' logic file generated by CSPro

PROC GLOBAL

PROC MYDICT_FF
</logic>

These three lines will always be generated when you create a batch application. "MYBATCHEDIT" shown in the comment line is the file name of your batch application (without the file extension). "MYDICT_FF" is the file name of the dictionary you have based your application on (without the file extension), with "_FF" appended to it. You can delete the comment, but if you delete the <logiccolor>PROC GLOBAL</logiccolor> or <logiccolor>PROC</logiccolor> MYDICT_FF statements, CSPro will regenerate them anytime you open, save, or exit your application. To get guidance on how to develop your CSPro logic, review <link cspro_program_structure.csdoc>CSPro's Program Structure</link>.

To <link moving_around_a_logic_application.csdoc>move around</link> your application, select anything on the batch tree to take you immediately to that logic block. CSPro places you within a window for that specific <link proc_statement.csdoc>PROC</link>; it does not move you to that logic block (which may not yet exist) within the larger logic file.

<subheader>Compiler Output/Messages</subheader>

The lower right portion of the screen is where the programmer develops any <link message_file_mgf.csdoc>messages</link> they want to issue during their program run (click on the <b>Messages</b> tab) and to inspect the results of their <link compile_logic.csdoc>logic compilation</link> (click on the <b>Compiler Output</b> tab). As with the Tree View, clicking on a tab makes the contents of that view active.

The <b>Message</b> tab is used to write messages that will be used in the execution of the program. While you can still write in-line messages, keeping them isolated to the Message block makes your logic easier to read, allows easy reference to messages issued on a repetitive basis, and facilitates editing and translation of those messages, since all messages are kept in a separate text file (<link message_file_mgf.csdoc>.mgf</link>) that can be easily shared.

Meanwhile the <b>Compiler Output</b> tab displays errors found during compilation of your program. If your logic <link compile_logic.csdoc>compiles</link> successfully, it will display "Compile Successful." If any errors are found, a list of warnings and/or errors encountered will be given. Clicking on a compiler message will take you to that point in your program.

If you wish to modify the size of any of these three work areas, just place the mouse over one of the separating bars, grab it, and drag to resize. All windows are present during the Batch Application development, none of them can be closed.

<seealso batch_edit_tree.csdoc message_file_mgf.csdoc compile_logic.csdoc cspro_program_structure.csdoc moving_around_a_logic_application.csdoc />

