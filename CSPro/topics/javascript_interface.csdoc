<title>JavaScript Interface (deprecated)</title>

<i><b>Feature Upgrade</b>: Starting with <link what_is_new_in_cspro_8_0.csdoc>CSPro 8.0</link>, you should no longer use this feature, the JavaScript interface, that was introduced in <link what_is_new_in_cspro_7_7.csdoc>CSPro 7.7</link>. All functionality, and more, can be achieved using the <link action_invoker_execution_javascript_web.csdoc>Action Invoker</link>. The JavaScript interface will be removed in a future version of CSPro. This documentation is for reference only and should not be used for new projects.</i>


<subheader>Converting JavaScript Interface Calls to Action Invoker Actions</subheader>

If you are converting a project that used the JavaScript interface, the following table lists the equivalent <link action_invoker.csdoc>actions</link> that can be called from <link action_invoker_execution_javascript_web.csdoc>web views</link>. Note that, unlike the JavaScript interface, you need proper permissions granted using <link action_invoker_access_token.csdoc>access tokens</link>.

<table 2 header>
    <cell>JavaScript Interface Method</cell><cell>Action</cell>
    <cell><colorinline JavaScript>CSPro.do("close")</colorinline></cell><cell><action>UI.close</action></cell>
    <cell><colorinline JavaScript>CSPro.getAsyncResult</colorinline></cell><cell><i>No longer necessary as asynchronous calls return a <link "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</link>.</i></cell>
    <cell><colorinline JavaScript>CSPro.getInputData</colorinline></cell><cell><action>UI.getInputData</action></cell>
    <cell><colorinline JavaScript>CSPro.getMaxDisplayWidth</colorinline></cell><cell><action>UI.getMaxDisplayDimensions</action></cell>
    <cell><colorinline JavaScript>CSPro.getMaxDisplayHeight</colorinline></cell><cell><action>UI.getMaxDisplayDimensions</action></cell>
    <cell><colorinline JavaScript>CSPro.invoke</colorinline></cell><cell><action>Logic.invoke</action></cell>
    <cell><colorinline JavaScript>CSPro.invokeAsync</colorinline></cell><cell><action>Logic.invokeAsync</action></cell>
    <cell><colorinline JavaScript>CSPro.returnData</colorinline></cell><cell><action>UI.close</action></cell>
    <cell><colorinline JavaScript>CSPro.runLogic</colorinline></cell><cell><action>Logic.eval</action></cell>
    <cell><colorinline JavaScript>CSPro.runLogicAsync</colorinline></cell><cell><action>Logic.evalAsync</action></cell>
    <cell><colorinline JavaScript>CSPro.setDisplayOptions</colorinline></cell><cell><action>UI.setDisplayOptions</action></cell>
</table>


<subheader>Overview</subheader>

CSPro displays <link html_in_cspro.csdoc>HTML</link> in an embedded browser when showing <link html_question_text.csdoc>question text</link>, when displaying <link templated_reports.csdoc>logic-based reports</link> written in HTML, and when displaying HTML content using the <logiccolor>view</logiccolor> or <logiccolor>htmldialog</logiccolor> functions. The HTML content is shown in a Chromium-based web browser (<link https://developer.microsoft.com/en-us/microsoft-edge/webview2>Edge WebView2</link> on Windows, and <link https://developer.android.com/reference/android/webkit/WebView>WebView</link> on Android). There is a limited API that facilitates communication between JavaScript and CSPro.

By using JavaScript in question text, you can include links in your question text that perform actions such as opening a manual or skipping to a different question.  By using JavaScript in <link templated_reports.csdoc>reports</link> or in HTML shown using the <logiccolor>view</logiccolor> or <logiccolor>htmldialog</logiccolor> functions, you can add dynamic interactive features to your application.

When using the JavaScript interface, an error will display if CSPro cannot properly interpret the call. When calling a JavaScript method, if a movement statement (e.g., <logiccolor>reenter</logiccolor>) or application halt (e.g., <logiccolor>stop</logiccolor>) occurs, the embedded browser will close automatically.


<subheader>Interface</subheader>

The interface is accessed using several methods belonging to the CSPro object. Some JavaScript interface methods are called synchronously (sequentially) while others are called asynchronously (concurrently). When a synchronous method is called, the JavaScript instruction following the call will not be executed until the method returns the result from CSPro. When the asynchronous method is called, the JavaScript instruction following this call will be executed immediately without waiting for the return value from CSPro.

These methods are always available:


<indent><b><colorinline JavaScript>CSPro.getMaxDisplayWidth()</colorinline></b></indent>

<indent 2>Returns the <link display_dimensions.csdoc>maximum display width</link>. This method executes synchronously.</indent>


<indent><b><colorinline JavaScript>CSPro.getMaxDisplayHeight()</colorinline></b></indent>

<indent 2>Returns the <link display_dimensions.csdoc>maximum display height</link>. This method executes synchronously.</indent>


<indent><b><colorinline JavaScript>CSPro.runLogic(logic)</colorinline></b></indent>
<indent><b><colorinline JavaScript>CSPro.runLogicAsync(logic, callback = undefined)</colorinline></b></indent>

<indent 2>Runs a <link user_defined_functions.csdoc>user-defined function</link> and returns the result of the function as a string. The parameter <colorinline JavaScript>logic</colorinline> contains the CSPro logic to call the function. The logic will be compiled at runtime, which means the full compiler is not available and thus only numeric constants and string literals can be passed as arguments to the CSPro function. (This limitation is due to the absence of the full CSPro compiler when running CSEntry on Android.) In the asynchronous version of this method, the optional parameter <colorinline JavaScript>callback</colorinline> is JavaScript code to execute following the running of the CSPro logic. Due to threading issues with the embedded browser, if the user-defined function you call may display UI elements as part of its operations, you must use the asynchronous version.</indent>


<indent><b><colorinline JavaScript>CSPro.invoke(functionName, arguments = undefined)</colorinline></b></indent>
<indent><b><colorinline JavaScript>CSPro.invokeAsync(functionName, arguments = undefined, callback = undefined)</colorinline></b></indent>

<indent 2>Runs the <logiccolor>invoke</logiccolor> function to execute a <link user_defined_functions.csdoc>user-defined function</link> using runtime binding. The parameter <colorinline JavaScript>functionName</colorinline> is a string containing the user-defined function name. The optional parameter <colorinline JavaScript>arguments</colorinline> is a <link JSON_primer.csdoc>JSON string </link> containing the arguments to the function. Only numeric constants, string literals, and arrays of numerics and strings can be provided as arguments. (Arrays will be transformed into a CSPro <logiccolor>List</logiccolor>.) In the asynchronous version of this method, the optional parameter <colorinline JavaScript>callback</colorinline> is JavaScript code to execute following the running of the CSPro logic. Due to threading issues with the embedded browser, if the user-defined function you call may display UI elements as part of its operations, you must use the asynchronous version.</indent>


<indent><b><colorinline JavaScript>CSPro.getAsyncResult()</colorinline></b></indent>

<indent 2>Returns the result of the last completed asynchronous method (CSPro.runLogicAsync or CSPro.invokeAsync). This method executes synchronously.</indent>


These methods are available when showing a HTML dialog using the <logiccolor>htmldialog</logiccolor> function:


<indent><b><colorinline JavaScript>CSPro.getInputData()</colorinline></b></indent>

<indent 2>Returns the string passed to the <logiccolor>htmldialog</logiccolor> function as the <logiccolor>inputData</logiccolor> argument. This method executes synchronously.</indent>


<indent><b><colorinline JavaScript>CSPro.setDisplayOptions(displayOptions)</colorinline></b></indent>

<indent 2>Sets the display options used by the <logiccolor>htmldialog</logiccolor> function. The parameter <colorinline JavaScript>displayOptions</colorinline> is a <link JSON_primer.csdoc>JSON string</link> containing one or more of the display options used by the function. This method executes asynchronously.</indent>


<indent><b><colorinline JavaScript>CSPro.returnData(result)</colorinline></b></indent>

<indent 2>Sets the result of the <logiccolor>htmldialog</logiccolor> function and closes the dialog. The parameter <colorinline JavaScript>result</colorinline> is a string that will be returned to CSPro logic as the result of the <logiccolor>htmldialog</logiccolor> function. This method executes asynchronously.</indent>


This method is occasionally available to run operations that only exist in some contexts:


<indent><b><colorinline JavaScript>CSPro.do(action, token = undefined)</colorinline></b></indent>

<indent 2>Runs an operation with an optional token and optionally returns a result. The parameter <colorinline JavaScript>action</colorinline> is a string identifying the operation to run. This method executes synchronously.~!~
At present there is only one command, which is recognized by the embedded browser used by <logiccolor>view</logiccolor>:
<list>
    <li><colorinline JavaScript>"close"</colorinline>: Closes the browser (as though the user hit the OK button on Windows or the back button on Android).</li>
</list>
</indent>


<subheader>Example (Question Text)</subheader>

Question text HTML:

<report HTML>
<p>What is ~~NAME~~'s occupation?</p>
<p><a href="javascript:CSPro.runLogicAsync('ViewOccupationList();');">(view full list of occupations)</a></p>
</report>

CSPro logic:

<logic>
function ViewOccupationList()
    view("ISCO.pdf");
end;
</logic>


<subheader>Example (HTML Shown Using <logiccolor>view</logiccolor>)</subheader>

HTML:

<color HTML>
<h1>District Reports</h1>

<p>Select a province or district report to view:</p>

<ul>
  <li><a href="javascript:CSPro.runLogicAsync('ShowDistrictReport(1);');">Artesia</a>
    <ul>
      <li><a href="javascript:CSPro.runLogicAsync('ShowDistrictReport(1, 1);');">Dongo</a></li>
      <li><a href="javascript:CSPro.runLogicAsync('ShowDistrictReport(1, 2);');">Varda</a></li>
    </ul>
  </li>
</ul>

<p><a href="javascript:CSPro.do('close');">Return to Program</a></p>
</color>

CSPro logic:

<logic>
function ShowDistrictReport(numeric province, numeric district = notappl)
    // generate report...
end;
</logic>

An alternate way to call the function using a JavaScript function:

<color HTML>
<script>
    function showDistrictReport(province, district) {
        let input = {
            "province": province,
            "district": district
        };
        CSPro.invokeAsync("ShowDistrictReport", JSON.stringify(input));
    }
</script>

<a href="javascript:showDistrictReport(1, 2);">Show District Report: Varna</a>
</color>


<seealso html_in_cspro.csdoc action_invoker_execution_javascript_web.csdoc />
