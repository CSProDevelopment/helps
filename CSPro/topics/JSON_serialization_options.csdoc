<title>JSON Serialization Options</title>


<subheader>Overview</subheader>

When serializing logic symbols, or case data, to JSON, the default settings used by CSPro are defined as part of application's <link properties_json_serialization.csdoc>JSON serialization properties</link>. However, these settings can be overridden, generally by providing <arg>serializationOptions</arg> to one of the serialization routines (such as the <action>Logic.getSymbolValue</action> action).


<subheader>Symbol Options</subheader>

The following options control how some symbols are serialized:

<table 3 header nowrap>
    <cell>Property Name</cell><cell>Possible Values</cell><cell>Description</cell>
    <cell><colorinline JSON>"ArrayFormat"</colorinline></cell><cell><colorinline JSON>"full"</colorinline>~!~~!~<colorinline JSON>"sparse"</colorinline></cell><cell>Determines how Array objects are written.<note type="todo" text="HELP_TODO link to Array serialization description" />~!~The default value is: <colorinline JSON>"full"</colorinline>.</cell>
    <cell 3>&nbsp;</cell>
    <cell><colorinline JSON>"binaryDataFormat"</colorinline></cell><cell><colorinline JSON>"dataUrl"</colorinline>~!~~!~<colorinline JSON>"localhostUrl"</colorinline></cell><cell>Determines how the data of symbols that contain binary data (e.g., <logiccolor>Image</logiccolor>) is written.<note type="todo" text="HELP_TODO link to binary data serialization description, if exists" />~!~The default value is: <colorinline JSON>"localhostUrl"</colorinline>.</cell>
    <cell 3>&nbsp;</cell>
    <cell><colorinline JSON>"HashMapFormat"</colorinline></cell><cell><colorinline JSON>"array"</colorinline>~!~~!~<colorinline JSON>"object"</colorinline></cell><cell>Determines how HashMap objects are written.<note type="todo" text="HELP_TODO link to HashMap serialization description" />~!~The default value is: <colorinline JSON>"object"</colorinline>.</cell>
</table>


<subheader>Case Options</subheader>

The following options control how case data is serialized:

<table 3 header nowrap>
    <cell>Property Name</cell><cell>Possible Values</cell><cell>Description</cell>
    <cell><colorinline JSON>"binaryDataFormat"</colorinline></cell><cell><colorinline JSON>"dataUrl"</colorinline>~!~~!~<colorinline JSON>"localhostUrl"</colorinline></cell><cell>Determines how the data of binary dictionary items is written.<note type="todo" text="HELP_TODO link to binary dictionary items description, if exists" />~!~The default value is: <colorinline JSON>"localhostUrl"</colorinline>.</cell>
    <cell 3>&nbsp;</cell>
    <cell><colorinline JSON>"writeFieldStatuses"</colorinline></cell><cell><colorinline JSON>true</colorinline>~!~~!~<colorinline JSON>false</colorinline></cell><cell>If true, the <link highlighted_function.csdoc>entry status</link> of fields in a data entry applications is written.~!~The default value is: <colorinline JSON>true</colorinline>.</cell>
    <cell 3>&nbsp;</cell>
    <cell><colorinline JSON>"writeLabels"</colorinline></cell><cell><colorinline JSON>true</colorinline>~!~~!~<colorinline JSON>false</colorinline></cell><cell>If true, the <link value_sets_description.csdoc>value set label</link> associated with the item is written along with the code.~!~The default value is: <colorinline JSON>false</colorinline>.</cell>
</table>


<subheader>Example</subheader>

<logic>
string caseJson = CS.Data.getCase(name := "JAMAICA_POP_DICT",
                                  serializationOptions := @object "{ \"writeLabels\": true }");
</logic>


<seealso properties_json_serialization.csdoc />
