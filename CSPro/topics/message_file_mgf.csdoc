<title>Message File (.mgf)</title>

The message file for a data entry application stores the error message text that is displayed during data entry. The message file for a batch application stores the error message text that will be included in the execution report. The message file has the extension <b>.mgf</b>. While creating your application, you can view the message text in a window at the bottom of the logic screen.

You can associate multiple message files with an application, which can be useful if you have messages defined in multiple languages. To do this, select <link manage_application_files.csdoc>File -> Manage Application Files</link> and then choose the external message file to add to the application. If you no longer want to use the external message file, you can remove it using the same Manage Application Files interface.

If the name of an external message file begins with "CSProRuntime," then the messages in that file will override the CSPro system messages. See <link collaborating_on_cspro_development.csdoc>Collaborating on CSPro Development</link> for more information about this file.


<subheader>Basic Messages</subheader>

Each line in the message file contains one message. A message consists of a message number followed by text. It is displayed on the entry screen when an <logiccolor>errmsg</logiccolor> function with the message number is executed in a data entry application. It is written to the execution report when <logiccolor>errmsg</logiccolor> function with the message number is executed in a batch application. The messages can also be accessed with other functions (including <logiccolor>maketext</logiccolor>).

For example, suppose a message file contains the following lines:

<message>
1 This is the first message
2 This is the second message
</message>

When <logiccolor>errmsg(1)</logiccolor> is executed in a data entry application, the message "This is the first message" is displayed on screen. When <logiccolor>errmsg(2)</logiccolor> is executed, the message "This is the second message" is displayed.


<subheader>Message Text Escape Sequences</subheader>

By default, the message text following the message number is processed without regard to <link string_literals.csdoc>escape sequences</link> (character sequences that begin with a backslash character). However, if using <link logic_version.csdoc>logic version</link> CSPro 8.0+, message text that begins with a single or double quotation mark is processed as if it were a string literal or verbatim string literal. For example, the following messages are identical:

<message>
// all evaluate to: I like to use backslashes \ and "quotation" 'marks'!
1 I like to use backslashes \ and "quotation" 'marks'!
1 "I like to use backslashes \\ and \"quotation\" 'marks'!"
1 @"I like to use backslashes \ and ""quotation"" 'marks'!"
</message>

<subheader>Messages with Arguments</subheader>

Arguments can be specified in the <logiccolor>errmsg</logiccolor> function. <link message_formatting_options.csdoc>These arguments</link> can be numeric expressions or string expressions. String arguments in the error message text are indicated by <b>%s</b>. Integer numeric arguments are indicated with <b>%d</b>. Decimal numeric arguments are indicated with <b>%f</b>. For example, a message file might contain the following:

<message>
1 The month of %s has only %d days. You entered %d!
</message>

The application could use this as follows:

<logic>
errmsg(1, "June", 30, 31);
</logic>

When the function is executed, it knows to use error message 1 and substitute the word "June" for <b>%s</b> in the message text, the number 30 for the first <b>%d</b>, and the number 31 for the second <b>%d</b>. The message "The month of June has only 30 days. You entered 31!" will be displayed on the screen.

The more general the arguments of the message, the more flexible the message. In the example below, the value of the variable HHDAY is used as an argument. The error message will use the value of <logiccolor>HHDAY</logiccolor> if the <logiccolor>errmsg</logiccolor> function is executed.

<logic>
PROC HHDAY

    if HHMONTH = 6 and HHDAY > 30 then
        errmsg(1, "June", 30, HHDAY);
        reenter;
    endif;
</logic>


<subheader>Commenting Message Files</subheader>

<link comments.csdoc>Comments</link> can be used to clarify the syntax listed in a message, or to identify "ownership" of the message or message blocks (i.e., what code blocks use the messages: global messages or just specific areas?).

There are three ways to mark message text as a comment. In all cases, the comment characters must appear at the beginning of the line. You can use single-line comments (<logiccolor>//</logiccolor>), and both the <link logic_version.csdoc>new and old</link> logic versions of multiline comments (<logiccolor>/* */</logiccolor>, <colorinline cspro_v0>{ }</colorinline>). Unlike in logic, multiline comments cannot appear in the middle of a line. A multiline comment can end on the same line that it started, or at the beginning of a subsequent line.

For example, messages might be grouped in your message file as follows:

<message>
// Global messages

0001 If the interview result code <> 1 (interview started), the interview will terminate.
0002 If consent is not given, the interview will terminate.
0003 Consent was previously given, are you sure you wish to change it to no?

/* Date-related messages */

0020 Interview year (%d) cannot be after system year (%d).
0021 Interview date (YYYY/MM/DD=%4d/%02d/%02d) cannot be after system date (YYYY/MM/DD=%4d/%02d/%02d).
0022 Invalid date (month/day combo not possible MM/DD=%02d/%02d).
</message>


<subheader>Messages in Multiple Languages</subheader>

When designing an application that will be used in <link multiple_language_applications.csdoc>multiple languages</link>, you can define multiple messages for a given message number. Use the <link define_languages.csdoc>language name</link>, followed by the message number in parentheses, as shown in this example:

<message>
101     Hello
ZH(101) 你好
FR(101) Bonjour
</message>

CSPro will automatically display the correct message based on the current language. If no translated message exists for the current language, the default message is shown.

Using the <colorinline message>Language=</colorinline> directive declares that all subsequent error messages are in a given language. For example, the previous example could be rewritten as:

<message>
Language=EN
101 Hello

Language=ZH
101 你好

Language=FR
101 Bonjour
</message>

If you would like to define messages for multiple languages at the same time, separate the name of each language with a comma:

<message>
Language=HI, PA
101 नमस्ते
</message>

You can also use the message file to translate string literals that are used along with the <logiccolor>tr</logiccolor> function. For example:

<message>
ZH("Hello") 你好
FR("Hello") Bonjour
</message>

Calling <logiccolor>tr("Hello")</logiccolor> in logic will display the correct string based on the current language.

Based on the <link logic_version.csdoc>logic version</link>, escape sequences in translated string literals may be processed. For example:

<message>
FR("first line\nsecond line") "première ligne\ndeuxième ligne"
</message>


<seealso multiple_language_applications.csdoc CS_Message.csdoc tr_function.csdoc />
