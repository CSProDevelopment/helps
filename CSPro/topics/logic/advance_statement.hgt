<title>Advance Statement</title>
<context logic_help_advance />

<subheader>Format</subheader>

<logicsyntax>
advance 『to』 『field_name』;
</logicsyntax>

<subheader>Description</subheader>

The <logiccolor>advance</logiccolor> statement moves forward, field by field, to the specified field, executing logic in fields' <logiccolor>preproc</logiccolor> and <logiccolor>postproc</logiccolor> events as it proceeds. It acts as though the Enter key were pressed repeatedly until either the specified field appears or one of the procedures executed during the advance goes to a different field.

The optional <arg>field_name</arg> is either the name of a field or is a string variable specifying the name of the field. If the <arg>field_name</arg> is not specified, the program attempts to advance to the end of the level.

The target field can be located in any record at the same level as the current field, but it cannot be located at a different level. The field must be later on the path than the current field, meaning that it is a field that has not yet been entered. If the field has already been entered, an error message will be displayed during data entry. If you do not know whether the field is earlier in the data path, use the <logiccolor>move</logiccolor> statement.

Note that the <logiccolor>advance</logiccolor> statement behaves differently from the <logiccolor>skip</logiccolor> statement, moving <i>over</i> some number of fields, rather than skipping <i>past</i> the fields.

<subheader>Example</subheader>

<logic>
PROC CEB

preproc

	// for girls aged less than 15, prefill in 0 for children ever born, but
	// keep the information on path in case the keyer wants to change it
	if AGE < 15 then
		CEB = 0;
		CEB_M = 0;
		CEM_F = 0;
		advance to MARITAL_AGE;
	endif;
</logic>

<seealso ask_statement.hgt move_statement.hgt noinput_statement.hgt reenter_statement.hgt skip_statement.hgt />
