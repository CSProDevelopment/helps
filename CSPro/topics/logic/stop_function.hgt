<title>Stop Function</title>

<subheader>Format</subheader>

<logicsyntax>
b = stop(『<arg>stop_code</arg>』);
</logicsyntax>

<subheader>Description</subheader>

The <logiccolor>stop</logiccolor> function prematurely ends a CSPro application. If the function is used in a data entry application, the optional numeric expression <arg>stop_code</arg> determines whether data entry is stopped just for the current case or whether the entire data entry application is closed. If <arg>stop_code</arg> is not specified or is 0, entry of the current case is stopped (the same a pressing the stop button), but CSEntry remains active. If <arg>stop_code</arg> is 1, entry of the current case is stopped and CSEntry terminates.

In a data entry application, if the function is executed in the <logiccolor>postproc</logiccolor> of the first (highest) level then the data for the case is saved. Otherwise, any data entered for the current case is lost. If you want to avoid losing data, you can call <logiccolor>savepartial</logiccolor> just before the <logiccolor>stop</logiccolor> function.

If the function is used in a batch edit application, the <arg>stop_code</arg> has no effect. The run is always terminated. If an output file was specified in the batch run, neither the current case nor subsequent cases will be saved to the output file.

<subheader>Return Value</subheader>

The function returns a logical value of 0 (false) if the program cannot be stopped (for example, if the function is called from an external form).

<subheader>Data Entry Example</subheader>

<logic>
if VALUE = 99 then
	savepartial();
	stop(1);
endif;
</logic>

<subheader>Batch Edit Example</subheader>

<logic>
if cntTotalErrors > 100 then
	stop();
endif;
</logic>

<seealso endcase_statement.hgt skip_case_statement.hgt />
