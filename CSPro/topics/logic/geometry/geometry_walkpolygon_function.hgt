<title>Geometry.WalkPolygon Function</title>


<subheader>Format</subheader>

<logicsyntax geometry>
b = geometry_name.walkPolygon(『<arg>map_name</arg>』);
</logicsyntax>


<subheader>Description</subheader>

The <logiccolor geometry>geometry.walkPolygon</logiccolor> function displays an interactive map-based interface allowing the user to create a polygon by walking the perimeter of an area and recording their location using the GPS. The interface is similar to that used by <logiccolor geometry>geometry.tracePolygon</logiccolor> except that rather than tapping on the map to place the vertices of the polygon, there is an add vertex button that places a vertex at the user's current location as determined by GPS. While walking the outline, the user may also drag vertices of the polygon by long pressing on them in order to modify the polygon. The function returns when the user has finished creating the polygon on the map and taps the save button.

The optional argument <arg>map_name</arg> is the name of a <link map.hgt>map</link> object that will provide the display parameters used for the map that is shown while the user walks the polygon. You can use this parameter to set the <link map_set_base_map_function.hgt>base map</link>, <link map_set_title_function.hgt>title</link>, and <link map_zoom_to_function.hgt>location/zoom level</link> of the map. You can also use the map parameter to display <link map_add_marker_function.hgt>markers</link> and <link map_add_geometry_function.hgt>geometry</link> on the map, however any callbacks for clicking on markers or on the map itself are ignored while walking the polygon. Any buttons on the map are replaced by buttons for adding a vertex, saving, clearing, and deleting the last point placed while the polygon is being walked. If the argument <arg>map_name</arg> is omitted, a map with default settings is displayed while walking the polygon.

After walking the polygon, you can <link geometry_save_function.hgt>save</link> the geometry to a file, compute the <link geometry_area_function.hgt>area</link> of the polygon, or compute the <link geometry_perimeter_function.hgt>perimeter</link> of the polygon.

If <logiccolor>geometry_name</logiccolor> already contains a polygon, this polygon will be displayed and the user will be able to modify it by long pressing on the vertices to drag them. If the geometry contains more than one polygon, only the first polygon is shown. All entities in the geometry other than polygons are ignored. If the geometry was loaded from GeoJSON, any polygons in entities of type MultiPolygon are ignored. If you wish to capture a new polygon rather than editing the existing geometry, use the <logiccolor geometry>geometry.clear</logiccolor> function before calling <logiccolor geometry>geometry.walkPolygon</logiccolor>.


<subheader>Return Value</subheader>

The function returns a logical value of 1 (true) if the user created a polygon and 0 (false) if the file user canceled polygon walking by tapping the back button.


<subheader>Example 1</subheader>

<logic>
// Declare a geometry
geometry outline;
	
// Have the user walk the outline of a polygon
if outline.walkPolygon() then

	// Save the outline to a GeoJSON file
	outline.save("outline.geojson");
	
endif;
</logic>


<subheader>Example 2</subheader>

<logic>
// Declare a geometry
geometry plot;
	
// Declare a map
map mymap;

// Set map display parameters
mymap.setBaseMap("basemap.mbtiles");
mymap.setTitle("Tap points on the map to outline the plot");

// Have the user walk the outline of a polygon using the map
if plot.walkPolygon(mymap) then

	// Capture the plot area
	PLOT_AREA = plot.area();
	
endif;
</logic>


<seealso geometry.hgt geometry_tracepolygon_function.hgt />
