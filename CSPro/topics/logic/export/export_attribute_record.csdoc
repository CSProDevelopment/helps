<title>Export Attribute: record</title>

When working with a datafile that contains 2+ records, this allows you to select a specific record for output. The format is as follows:

<logicsyntax><arg>file_name</arg> | <arg>record</arg>=<arg>record_name</arg></logicsyntax>

An example of this attribute being used for the output data file is:

<pff>.\pop_record.xlsx|record=POP_REC</pff>

By using this option for each record type, you can create multiple output files. For example, if your dictionary contained a housing and population record, you could each as separate files&mdash;and as different output file types&mdash;as shown below:

<pff>".\pop_record.xlsx|record=POP_REC"
".\housing_record.csv|record=HOUSE_REC"</pff>

Note the first connection string will generate an Excel file, and the second will generate a <b>.csv</b> file. While appearing as a single entry in the run dialog, when you look at the <b>.pff</b> file, you will see they have been written on separate lines as follows:

<pff>
OutputData=.\pop_record.xlsx|record=POP_REC
OutputData=.\housing_record.csv|record=HOUSE_REC
</pff>

The <b>record</b> attribute can not be used more than once when creating a new data source. For example, if your datafile had 3 records (housing, population, and vaccination), and you wanted to export the population and vaccination records into a new file, you can not do this with this feature. Only a single record type can be named for each new data source. If you wanted to export multiple, but not all, of the datafile's records, you would have to use CSPro's utility <link CSExport::introduction_to_export_data.csdoc>CSExport</link>, found in the "Tools" dropdown of most CSPro applications.

If the record attribute is used to generate a CSPro file (either .csdb(e) or .dat), you must include the <b>type</b> attribute set to "CSProExport". This is necessary as it tells the exporter that a CSPro data file is being created, which prompts it to create the dictionary first. The exporter then uses that <b>.dcf</b> to construct the resultant datafile. Therefore, if the housing record above was being written to a <b>.csdb</b> file instead of the <b>.csv</b> file, the connection string would change to the following:

<pff>.\housing_record.csdb|record=HOUSE_REC&type=CSProExport</pff>

If the <b>record</b> attribute is not used, the default behavior will be to write out all records found in the datafile.

<seealso export_attributes.csdoc />
