<title>ErrMsg Function</title>

<subheader>Format 1</subheader>

<logicsyntax>
i = errmsg(<arg>string_exp</arg>『, <arg>argument1</arg>, ..., <arg>argument20</arg>』)

          『select(<arg>caption1</arg>, <arg>fieldname1</arg>『, ..., <arg>caption5</arg>, <arg>fieldname5</arg>』)』
          『case|summary』 
		  『denom=numeric_denom』;</logicsyntax>

<subheader>Format 2</subheader>

<logicsyntax>
i = errmsg(<arg>msg_num</arg>『, <arg>argument1</arg>, ..., <arg>argument20</arg>』)

          『select(<arg>caption1</arg>, <arg>fieldname1</arg>『, ..., <arg>caption5</arg>, <arg>fieldname5</arg>』)』
          『case|summary』 
		  『denom=numeric_denom』;</logicsyntax>

<subheader>Format 3</subheader>

<logicsyntax>
i =	errmsg(<arg>string_exp</arg>『, <arg>argument1</arg>, ..., <arg>argument20</arg>』)

	『select(<arg>caption1</arg>, <arg>fieldname1</arg>『, ..., <arg>caption5</arg>, <arg>fieldname5</arg>』) 『default(<arg>default_option</arg>)』 』
	『case ‖ summary』
	『denom = <arg>numeric_denom</arg>』;
</logicsyntax>

<subheader>Description</subheader>

The <logiccolor>errmsg</logiccolor> function displays a message on the data entry screen (when used in a Data Entry application) or writes a message to the output listing file (when used in a Batch Edit application). If messages are defined via the message number <arg>msg_num</arg>, then those messages must be stored in a message file [.mgf].  <arg>msg_num</arg> can be a number or <link expressions.hgt> numeric expression</link>.

Each <arg>argument</arg> is sequentially inserted into the error message. Arguments can be numeric or alphanumeric expressions, but the type of the argument must match the type of the receiving field in the message text. The maximum number of arguments is 20.

Some of the most common formatting options include (see <link message_formatting_options.hgt>Message Formatting Options</link> for a complete list):

<list>%<b>[n]d</b> = Insert a number and display it as an integer
%<b>[n.d]f</b> = Insert a number and display it as a decimal value
%<b>[n.d]s</b> = Insert a text string</list>

where <b><i>"n"</i></b> is the size of the field and <b><i>"d"</i></b> is the number of decimal places to show for a number.

Numbers are never truncated. Text strings are truncated only if <b><i>".d"</i></b> is used.

If <b><i>"n"</i></b> is positive, the insert is right-justified in the size of the field. If "n" is negative, the insert is left-justified in the size of the field. If <b><i>"n"</i></b> is a positive number with a leading zero, the insert is right-justified in the size of the field and zero filled to the left.

When inserting a number, if <b><i>"n"</i></b> is preceded by a +, the sign of the number is always displayed.

<logic>
numeric integerValue = 23456;

errmsg( "%d"       , integerValue);      //  23456
errmsg( "%-10d"    , integerValue);      //  23456
errmsg( "%10d"     , integerValue);      //       23456
errmsg( "%+10d"    , integerValue);      //      +23456
errmsg( "%+010d"   , integerValue);      //  +000023456
errmsg( "%-010d"   , integerValue);      //  0000023456
errmsg( "%f"       , integerValue);      //  23456.000000  Note the usage of %f


numeric decimalValue = 12.567;

errmsg( "%f"        , decimalValue);    //   12.567000
errmsg( "%-10.3f"   , decimalValue);    //   12.567
errmsg( "%d"        , decimalValue);    //   12			  Note the usage of %d
errmsg( "%10.2f"    , decimalValue);    //        12.57
errmsg( "%10.3f"    , decimalValue);    //       12.567
errmsg( "%+10.3f"   , decimalValue);    //      +12.567
errmsg( "%+010.3f"  , decimalValue);    //   +00012.567
errmsg( "%010.3f"   , decimalValue);    //   000012.567
errmsg( "%10.5f"    , decimalValue);    //     12.56700


string stringValue = "abcdef";

errmsg( "%s"        , stringValue);     //   abcdef
errmsg( "%-10s"     , stringValue);     //   abcdef
errmsg( "%-10.3s"   , stringValue);     //   abc
errmsg( "%10s"      , stringValue);     //       abcdef
errmsg( "%10.3s"    , stringValue);     //          abc
</logic>

The <logiccolor>case</logiccolor> and <logiccolor>summary</logiccolor> keywords give you some control over the output listing. By default, the output listing shows you messages case-by-case, and summarized by the number of times the message was triggered for the run (there is an optional denominator, described below). You can limit the output listing to only case-by-case reporting, or only summary reporting, by using these keywords.

The <logiccolor>denom</logiccolor> keyword allows you to specify a denominator, so that you can show percentages in the summary portion of the output listing. This is very useful for showing, for example, edit failure rates (and as such, this option is geared towards batch applications rather than data entry applications). In Format 1's Example 2 below, the output listing will show the number of times the head of household had more than one spouse, divided by the number of households processed during the run. Note that it is the responsibility of the application designer to write logic to put the proper values into the denominator variable.

The <b>select</b> keyword is used to give the option of specifying the field to go to in response to the error message. A button is placed on the error message window for each caption and fieldname pair specified as a <b>select</b> argument, with a maximum of 5 possible <b>select</b> argument pairs allowed. The caption will be displayed on the button. When a button is chosen, the system goes to the field specified by fieldname. If <logiccolor>continue</logiccolor> is used as the fieldname, the system proceeds to the next line of logic following the <logiccolor>errmsg</logiccolor> call. If a <arg>default_option</arg> is given, it will place the focus on the select option chosen when the message is presented. This is a good method to prioritize what option you want the user to make (reenter a value vs. continue for example). If a <arg>default_option</arg> is not given, no button will have the focus.

<subheader>Return Value</subheader>

The function returns the sequence number of the button pressed. When the <b>select</b> keyword is not used, the function will return 1, as only the "OK" button is presented to the user, corresponding to button #1 ("Cancel" is never presented, and so a code of zero is not possible).

When the <b>select</b> keyword is used, the function returns the sequence number of the button that was pressed, with the first button having the value 1. A maximum of 5 select argument pairs is allowed.

<subheader>Format 1 Examples</subheader>

<b>Example 1</b>

<logic>errmsg("Head of household is %d years old.", AGE);</logic>


<b>Example 2</b>

<logic>if count(PERSONS where RELATIONSHIP=2) > 1 then
	errmsg("Head of HH has more than 1 spouse") denom = HH_COUNT summary;
endif;</logic>


<b>Example 3</b>

<logic>errmsg("Head of household is %d years old.  Age must be >= 12", AGE)
      select("Go to RELATIONSHIP", RELATIONSHIP,"Go To AGE", AGE)
      denom = PERSON_COUNT;</logic>

<subheader>Format 2 Examples</subheader>

<logic>OK = errmsg (1,"June",30,31);</logic>

where the message file contains the following entry:

<logic>1 %s has only %d days. You entered %d!</logic>

Note the <logiccolor>errmsg</logiccolor> call could have also been invoked as follows:

<logic>
i = 1;
OK = errmsg (i,"June",30,31);</logic>


<seealso warning_function.hgt message_formatting_options.hgt message_file_mgf.hgt />
