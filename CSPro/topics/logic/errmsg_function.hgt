<title>ErrMsg Function</title>


<subheader>Format 1</subheader>

<logicsyntax>
b = errmsg(<arg>string_exp</arg>『, <arg>argument1</arg>, ..., <arg>argumentN</arg>』)
   [select(caption-1, field-name-1, ..., caption-n, field-name-n)]
   [denom=var] [case|summary]);</logicsyntax>

<subheader>Format 2</subheader>

<logicsyntax>
b = errmsg(<arg>msg-num</arg>『, <arg>argument1</arg>, ..., <arg>argumentN</arg>』)
   [select(caption-1, field-name-1, ..., caption-n, field-name-n)]
   [denom=var] [case|summary];</logicsyntax>

<subheader>Description</subheader>

The <b>errmsg</b> function displays a message on the data entry screen (when used in a Data Entry application) or writes a message to the batch edit report (when used in a Batch Edit application). If messages are defined via the message number msg-num, then those messages will be stored in a message file [.mgf].

<i>msg-num</i> can be a number or <link expressions.hgt> numeric expression</link>.

Note to ISSA users: Use the <b>errmsg</b> function with the <b>case</b> keyword to replace the <b>"display"</b> function.

Each argument is sequentially inserted into the error message. Arguments can be numericor alphanumeric expressions, but the type of the argument must match thetype of the receiving field in the message text. The maximum number ofarguments in an errmsg function is 20.

In the message text:

<list>%<b>[n]d</b> = Insert a number and display it as an integer
%<b>[n.d]f</b> = Insert a number and display it as a decimal value
%<b>[n.d]s</b> = Insert a text string</list>

<b><i>"n"</i></b> is the size of the field and <b><i>"d"</i></b> is the number of decimal places to show for a number.

Numbers are never truncated. Text strings are truncated only if <b><i>".d"</i></b> is used.

If <b><i>"n"</i></b> is positive, the insert is right-justified in the size of the field. If "n" is negative, the insert is left-justified in the size of the field. If <b><i>"n"</i></b> is a positive number with a leading zero, the insert is right-justified in the size of the field and zero filled to the left.

When inserting a number, if <b><i>"n"</i></b> is preceded by a +, the sign of the number is always displayed.

<logic>
numeric integerValue = 23456;

errmsg( "%d"       , integerValue);      //  23456
errmsg( "%-10d"    , integerValue);      //  23456
errmsg( "%10d"     , integerValue);      //       23456
errmsg( "%+10d"    , integerValue);      //      +23456
errmsg( "%+010d"   , integerValue);      //  +000023456
errmsg( "%-010d"   , integerValue);      //  0000023456
errmsg( "%f"       , integerValue);      //  23456.000000  Note the usage of %f


numeric decimalValue = 12.567;

errmsg( "%f"        , decimalValue);    //   12.567000
errmsg( "%-10.3f"   , decimalValue);    //   12.567
errmsg( "%d"        , decimalValue);    //   12			  Note the usage of %d
errmsg( "%10.2f"    , decimalValue);    //        12.57
errmsg( "%10.3f"    , decimalValue);    //       12.567
errmsg( "%+10.3f"   , decimalValue);    //      +12.567
errmsg( "%+010.3f"  , decimalValue);    //   +00012.567
errmsg( "%010.3f"   , decimalValue);    //   000012.567
errmsg( "%10.5f"    , decimalValue);    //     12.56700


string stringValue = "abcdef";

errmsg( "%s"        , stringValue);     //   abcdef
errmsg( "%-10s"     , stringValue);     //   abcdef
errmsg( "%-10.3s"   , stringValue);     //   abc
errmsg( "%10s"      , stringValue);     //       abcdef
errmsg( "%10.3s"    , stringValue);     //          abc
</logic>

The <b>denom</b> keyword allows you to specify a denominator, so that you can show percentages in the summary portion of the output listing. This is very useful for showing edit failure rates. In Example 2 below, the output listing will show the number of times there was more than one head of household divided by the number of households processed during the run. Note that it is the responsibility of the application designer to write logic to put the proper values into the denominator variable.

The <b>case</b> and <b>summary</b> keywords give you some control over the output listing. By default, the output listing shows you messages case by case, and also shows you a summary of the number of times the message was triggered (with an optional denominator, described above). You can limit the output listing to only case-by-case reporting, or only summary reporting by using these keywords.

The <b>select</b> keyword is used to give the option of specifying the field to go to in response to the error message. A button is placed on the error message window for each caption and field-name specified as a <b>select</b> argument.  The caption is what is displayed on the button. When the button is clicked, the system goes to the field specified as field-name. If <b>continue</b> is used as the field name, the system continues executing the code following the errmsg function.

<subheader>Return Value</subheader>

The function returns a logical value 1 (true) if successful and 0 (false) otherwise. When the select keyword is used, the function returns the number of the button that was pressed, with the first button having the value 1.

<subheader>Format 1 Examples</subheader>

<b>Example 1</b>

<logic>errmsg("Head of household is %d years old.", AGE);</logic>


<b>Example 2</b>

<logic>errmsg("More than 1 head of household") denom = PERSON_COUNT summary;</logic>


<b>Example 3</b>

<logic>errmsg("Head of household is %d years old.  Age must be >= 12", AGE)
      select("Go to RELATIONSHIP", RELATIONSHIP,"Go To AGE", AGE)
      denom = PERSON_COUNT;</logic>

<subheader>Format 2 Examples</subheader>

<logic>OK = errmsg (1,"June",30,31);</logic>

where the message file contains the following entry:

<logic>1 %s has only %d days. You entered %d!</logic>

Note the <logiccolor>errmsg</logiccolor> call could have also been invoked as follows:

<logic>
i = 1;
OK = errmsg (i,"June",30,31);</logic>


<seealso warning_function.hgt message_formatting_options.hgt message_file_mgf.hgt />
