<title>SOccurs Function</title>

<subheader>Format</subheader>
<logicsyntax>
i = soccurs(<arg>record_name</arg>);
</logicsyntax>

<subheader>Description</subheader>

Depending on where <logiccolor>soccurs</logiccolor> is invoked, it either returns the current occurrence of the repeating record, or the total number of occurrences for the repeating record. If a non-repeating record is given as an argument, the return code will always be zero (<logiccolor>0</logiccolor>). When counting records, the behavior for <logiccolor>soccurs</logiccolor> is identical to <link noccurs_function.csdoc>noccurs</link>.

<b>During data entry</b>, if <logiccolor>soccurs</logiccolor> is executed:

<list>
<li>prior to the input of any field from the record, <logiccolor>soccurs</logiccolor> returns zero (<logiccolor>0</logiccolor>).</li>
<li><i>from within the first form or roster created from the record</i>, <logiccolor>soccurs</logiccolor> returns the current occurrence, once the first field is keyed.</li>
<li><i>from within a second or later form or roster created from the record</i>, <logiccolor>soccurs</logiccolor> returns the maximum number of records so far keyed.</li>
</list>

For example, assume PERSON_RECORD contains 10 items&mdash;relationship, sex, age, and 7 other items. If a single repeating form or roster contains all 10 items, then soccurs always returns the current record occurrence, once the first field is keyed. However if this record had been split up into two or more forms/rosters, then soccurs will return the current occurrence from any field on the first form/roster (once entry of the first field is complete), but the total number of occurrences from any field within the second+ form/roster.

<b>During batch editing</b>, soccurs always returns the total number of record occurrences found.

<subheader>Return value</subheader>

The function returns the number of occurrences as an integer value.

<subheader>Example 1</subheader>

Within a <b>data entry application</b>, the following values will hold:

<logic>
PROC GLOBAL

PROC HH_LEVEL
preproc
    // will always return 0, as no field from the record has yet been entered
    NUM_HH_MEMBERS = soccurs(PERSON_RECORD);

PROC PERSON_ROSTER
preproc
    // will always return 0, as no field from the record has yet been entered
    NUM_HH_MEMBERS = soccurs(PERSON_RECORD);

postproc
    // will always return the total number of persons keyed, as entry is now complete
    NUM_HH_MEMBERS = soccurs(PERSON_RECORD);
</logic>


<subheader>Example 2</subheader>

Within a <b>batch edit application</b>, the following values will hold:

<logic>
PROC GLOBAL

PROC HH_LEVEL
preproc
    // will always return 0, as the case has not yet loaded
    NUM_HH_MEMBERS = soccurs(PERSON_RECORD);

PROC FIRST_FORM
preproc
    // will always return the total number of persons found, as the case is now loaded
    NUM_HH_MEMBERS = soccurs(PERSON_RECORD);
</logic>


<seealso Totocc_Function.csdoc Curocc_Function.csdoc Noccurs_Function.csdoc Count_Function.csdoc />
