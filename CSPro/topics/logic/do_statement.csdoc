<title>Do Statement</title>

<subheader>Format</subheader>

<logicsyntax>
do 『『varying』 <arg>var</arg> = expression』 while/until condition 『by expression』

  statements;

enddo;
</logicsyntax>

<subheader>Description</subheader>

The <logiccolor>do</logiccolor> statement executes one or more statements repeatedly, in a loop, either while a logical condition is true, or until a logical condition is no longer true. The <logiccolor>do</logiccolor> and <logiccolor>enddo</logiccolor> keywords are required. You must use a while or until phrase to terminate the loop. The condition is evaluated on each repetition of the loop before any of the statements within the loop are executed.

If the <logiccolor>varying</logiccolor> clause is used, the variable must be a numeric variable. The variable assignment is performed once, before the first evaluation of the loop. The <logiccolor>varying</logiccolor> keyword has no effect on the command, and so may be omitted. It is possible to declare a <link numeric_statement.csdoc>numeric</link> variable after the varying keyword, in which case the numeric variable's scope is the duration of the do loop.

When the <logiccolor>while</logiccolor> option is used, it means the statements within the loop (between <logiccolor>do</logiccolor> and <logiccolor>enddo</logiccolor>) are executed while the condition remains true. That is, if the condition is true, the statements are executed. If the condition becomes false, execution moves to the first statement following the enddo keyword.

When the <logiccolor>until</logiccolor> option is used, the statements within the do are executed until the condition becomes true. That is, if the condition is false the statements are executed. If the condition becomes true, execution moves to the first statement following the enddo keyword.

After the <logiccolor>while</logiccolor> or <logiccolor>until</logiccolor> condition is evaluated, CSPro increments the internal loop counter (if <arg>var</arg> is not used) or <arg>var</arg> itself (if it is used) by 1. If you wish to use a different value to increment (or decrement) the loop, use the <logiccolor>by</logiccolor> option. The number or numeric expression that follows it can be positive (or negative), and will be added (or subtracted) after each repetition of the loop. For example, if you only wanted to process odd-numbered records, you could increment <arg>var</arg> by 2. If you wanted to start with 100 and count backwards, you can decrement by -1.

You can also exit a loop early (i.e., before all logic threads have been evaluated) by using <logiccolor>break</logiccolor>; likewise, you can begin processing the next iteration of the loop before all threads have been evaluated by using <logiccolor>next</logiccolor>.

<subheader>Example</subheader>

<logic>
PROC MARITAL_STATUS

HEAD = 0;

do varying i = 1 until HEAD > 0 or i > totocc(PERSON)

    if RELATIONSHIP(i) = 1 then
        HEAD = i;
    endif;
enddo;
</logic>

This same example could be rewritten using the <logiccolor>while</logiccolor> condition as follows:

<logic>
PROC MARITAL_STATUS

HEAD = 0;

do varying i = 1 while HEAD = 0 and i <= totocc(PERSON)

    if RELATIONSHIP(i) = 1 then
        HEAD = i;
    endif;
enddo;
</logic>

It is purely a matter of preference as to which method should be used.

<seealso for_statement.csdoc while_statement.csdoc if_statement.csdoc />
