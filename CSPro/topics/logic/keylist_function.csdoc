<title>KeyList Function</title>


<subheader>Format</subheader>

<logicsyntax>
i = keylist(<arg>dictionary_name</arg>『, <arg>key_listing</arg>』);
</logicsyntax>


<subheader>Description</subheader>

The <logiccolor>keylist</logiccolor> function fills <arg>key_listing</arg>, an optional string <link List.csdoc>List</link>, with the <link key_function.csdoc>keys</link> in the file referenced by <arg>dictionary_name</arg>. The dictionary can be either the main input dictionary or an external dictionary. A dictionary key is a single string comprised of the IDs for a case.

It is possible, by specifying <link set_access_statement.csdoc>dictionary access parameters</link> after the dictionary name, to limit the keys that the <logiccolor>keylist</logiccolor> function returns.


<subheader>Return Value</subheader>

The function returns the number of cases in file.


<subheader>Example 1</subheader>

<logic>
PROC ACTION

	if ACTION in 1,3,6 and keylist(CENSUS_DICT) = 0 then // actions that require cases
		errmsg("No cases have been entered yet.");
		reenter;
	endif;
</logic>


<subheader>Example 2</subheader>

<logic>
PROC HOUSEHOLD_NUMBER

	List string enteredKeys;

	keylist(CENSUS_DICT, enteredKeys);

	do numeric keyCtr = 1 while keyCtr <= enteredKeys.length()

		if HOUSEHOLD_NUMBER = tonumber(enteredKeys(keyCtr)[9:2]) then
			errmsg("The household number %d has already been entered.", HOUSEHOLD_NUMBER);
			reenter;
		endif;

	enddo;
</logic>


<seealso key_function.csdoc />
