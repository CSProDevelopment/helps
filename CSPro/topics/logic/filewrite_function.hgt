<title>FileWrite Function</title>

<subheader>Format</subheader>

<logicsyntax>
b = filewrite(<arg>file_handler</arg>, <arg>message</arg>『, <arg>argument1</arg>, ..., <arg>argumentN</arg>』);
</logicsyntax>

<subheader>Description</subheader>

The <logiccolor>filewrite</logiccolor> function writes one or more lines of text to the <link file.hgt>file</link> associated with <arg>file_handler</arg>.

The <arg>message</arg> is either a string expression or a numeric <link message_file_mgf.hgt>message number</link> that contains the text that is written to the file. If the text contains any <link message_formatting_options.hgt>message formatters</link>, the optional arguments <arg>argument1</arg> to <arg>argumentN</arg> will be inserted into the text. There are some additional options for file output:

<list>
	<li>If you want to break a line of text into two lines, place <b>\n</b> where you want the line divided.</li>
	<li>If you want a text line to begin on a new page, place <b>\f</b> at the beginning of the text string.</li>
	<li>To output <b>\n</b> or <b>\f</b> as text instead of a new line or a new page, use a double backslash (e.g., <b>\\n</b>).</li>
</list>

Alternatively, the <arg>message</arg> can be a string <link list.hgt>list</link>. If a list is provided, then each string contained in the list is written to the file, allowing for the output of multiple lines of text with one function call.

<subheader>Return Value</subheader>

The function returns a logical value of 1 (true) if successful and 0 (false) otherwise.

<subheader>Example</subheader>

<logic>
PROC GLOBAL

file CsvFile;

PROC EXAMPLE

	filewrite(CsvFile, "Name,Sex,Age");
	
	do numeric counter = 1 while counter <= totocc(PERSON_REC)
		filewrite(CsvFile, "%s,%d,%d", encode(CSV, NAME(counter)), SEX(counter), AGE(counter));
	enddo;
</logic>
 
<seealso fileread_function.hgt file_write_function.hgt write_function.hgt message_formatting_options.hgt encode_function.hgt  />
