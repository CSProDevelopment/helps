<title>OnStop Global Function</title>

<subheader>Format</subheader>

<logicsyntax>
function OnStop();
</logicsyntax>

<subheader>Description</subheader>

<logiccolor>OnStop</logiccolor> is a special global function. It has no return value and must be placed in the <logiccolor>PROC GLOBAL</logiccolor> section just like any other <link user_defined_functions.csdoc>user-defined function</link>.

When defined, it provides control over what happens when the data entry operator tries to stop data entry by pressing the ESC key, the <image stop_button.png /> Stop button, Ctrl+S, or attempting to exit data entry. When any of the above events occur, the <logiccolor>OnStop</logiccolor> function is executed, with no stop dialog (discard, save, cancel) appearing.

The <logiccolor>OnStop</logiccolor> function can be used to prevent the operator from stopping data entry (<b>see Example 1</b> below) or to allow stopping data entry only under certain conditions (<b>see Example 2</b> below).

Be aware that if you have added an <logiccolor>OnStop</logiccolor> function to your data entry application, then when a partial case is resumed, no resume dialog ("Do you want to go to last...") appears. Therefore if you wish for this feature to be available to your interviewers, you must code it yourself (<b>see Example 3</b> below).

Similarly, if special actions are required when resuming a partial case, check whether a partial case has been entered by using the <logiccolor>ispartial</logiccolor> function, and then add the appropriate logic.

The <logiccolor>OnStop</logiccolor> function is not executed when the <logiccolor>stop</logiccolor> function is executed.

<subheader>Example 1</subheader>

<logic>
PROC GLOBAL

function OnStop()
	reenter;
end;
</logic>

<subheader>Example 2</subheader>

<logic>
PROC GLOBAL

function OnStop()
	if getsymbol() in "FIRST_NAME", "LAST_NAME" then
		reenter;
	else
		savepartial();
		stop(1);
	endif;
end;
</logic>

<subheader>Example 3</subheader>

As mentioned above, when OnStop is defined in an entry application, you must write your own logic to resume from a partial save. However, this is only possible in one-level applications, as the name and occurrence number of the last field entered is not retrievable in two-level entry applications.

<logic>
string last_field_entered = getsymbol(savepartial);
numeric choice;

if last_field_entered <> "" then

	choice = errmsg("Do you want to resume where you left off?")
					select("Yes", continue,
						   "No", continue);
	if choice = 1 then
		advance to last_field_entered;
	endif;
endif;
</logic>

<seealso user_defined_functions.csdoc function_statement.csdoc stop_function.csdoc savepartial_function.csdoc ispartial_function.csdoc endlevel_statement.csdoc />
