<title>Map.AddGeometry Function</title>

<subheader>Format</subheader>

<logicsyntax>
geometryId = map_name.addGeometry(<arg>geometry_name</arg>);
</logicsyntax>

<subheader>Description</subheader>

The <logiccolor map>map.addGeometry</logiccolor> function adds the vector data (points, lines, and polygons) contained in <arg>geometry_name</arg> to the <link map.hgt>map</link> named <logiccolor>map_name</logiccolor>. The vector data will be drawn on the map in a layer on top of the base map. Points are rendered as markers while lines and polygons are drawn as lines and polygons. The vector data may be loaded from a GeoJSON file using the function <logiccolor geometry>geometry.load</logiccolor> or traced by the interviewer using the <logiccolor geometry>geometry.tracePolygon</logiccolor> or <logiccolor geometry>geometry.walkPolygon</logiccolor> functions.

Loading very large GeoJSON files can be slow and may exceed the memory of the device. In some cases it may be necessary to break up large GeoJSON files into smaller files. For example, rather than using a single file containing geometry for an entire country, create smaller files for the geometry in each district and then load only the file for the district that the interviewer is currently working in. Alternatively, rather than using geometry you can save the vector data in a custom <link offline_maps.hgt>base map</link>.

<subheader>Return Value</subheader>

The function returns the identifier of the new geometry which may be used in subsequent calls to <logiccolor map>map.removeGeometry</logiccolor> to delete the geometry from the map.


<subheader>Example</subheader>

<logic>
// Declare a map
map mymap;

// Load geometry from a file
geometry boundary;
boundary.load("boundary.geojson");

// Add geometry to the map
numeric geometryId = mymap.addGeometry(boundary);

// Show the map
mymap.show();
</logic>

<seealso map.hgt geometry.hgt map_remove_geometry_function.hgt map_clear_geometry_function.hgt />
