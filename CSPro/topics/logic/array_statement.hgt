<title>Array Statement</title>
<context logic_help_array />

<subheader>Format</subheader>

<logicsyntax>
array 『<arg>array_type</arg>』 <arg>array_name</arg>(<arg>dimension1</arg>『, ..., <arg>dimensionN</arg>』) 『save』;
</logicsyntax>

<subheader>Description</subheader>

The <arg>array</arg> statement creates an array with the name <arg>array_name</arg>. CSPro supports arrays of an unlimited number of dimensions.

Only one array at a time can be declared with the array statement. The array name must be unique and contain only letters, numbers, or the underscore ('_') character. It must begin with a letter.

Arrays can be numeric, alphanumeric or string. By default an array is numeric, but the type can be modified by specifying the <arg>array_type</arg>.  If creating an alphanumeric array, the length of each array element can be specified by definining the <arg>array_type</arg> as follows:

<logicsyntax>alpha 『(<arg>array_length</arg>)』</logicsyntax>

If <arg>array_length</arg> is not specified, each element will be 16 characters.

The size of each dimension is specified by supplying a constant positive numeric value, <arg>dimension1</arg> to <arg>dimensionN</arg>. An array must have at least one dimension. A previously defined numeric value can also be used to specify the dimension size. The <logiccolor>length</logiccolor> function can be used to query the size of a dimension.

The initial values of the elements of an array can be set when declaring the array by listing each value, separated by a comma. If some values are defined and then followed by <logiccolor>...</logiccolor>, that set of values will be used over and over until the entire array has been initialized.

With a numeric array, each element starts with the value 0. For alphanumeric and string arrays, each element starts as a blank string. If using a numeric <link initialize_hot_decks_using_saved_arrays.hgt>saved array</link>, the initial array contents are <logiccolor>default</logiccolor>.

The optional keyword <logiccolor>save</logiccolor> indicates that the array values should be saved to a file and loaded from that file when the program is run again. This allows you to maintain the values of the arrays across multiple runs of the same program. When one or more arrays in the program are marked with <logiccolor>save</logiccolor>, the first time the application is run, a saved array file is created and the values of the arrays are written to the file at the end of program execution. On consecutive runs of the program, the initial values of the arrays are read in from the file. This is particularly useful for setting the initial values of hot decks. In this scenario, the program is run twice. The first run fills the hot deck and saves the hot deck array to the file. The second run loads the values saved from the first run and uses them as the initial values for the hot deck for imputation. See <topic initialize_hot_decks_in_program_logic.hgt /> for more information.

All arrays marked with <logiccolor>save</logiccolor> in the application are written to the same file. This file has the same name as the application but with a .sva file extension appended to it (for example, MyApplication.bch.sva). Saved arrays are not supported in data entry applications.


<subheader>Example 1 (Numeric)</subheader>

<logic>
PROC GLOBAL

array numeric MinimumAgeMarriage(2) = 15, // male
									  12; // female

PROC MARRIAGE_AGE

	if MARRIAGE_AGE < MinimumAgeMarriage(SEX) then
		errmsg("The minimum age of marriage is %d", MinimumAgeMarriage(SEX));
		reenter;
	endif;
</logic>


<subheader>Example 2 (String)</subheader>

<logic>
PROC GLOBAL

array string Months(12) =	"Jan", "Feb", "Mar", "Apr", "May", "Jun",
							"Jul", "Aug", "Sep", "Oct", "Nov", "Dec";

function string FormatDate()
	FormatDate = maketext("%d %s %d", sysdate("DD"), Months(sysdate("MM")), sysdate("YYYY"));
end;
</logic>


<subheader>Example 3 (Assignment)</subheader>

<logic>
numeric NumberProvinces = 12;
array numeric SexCountsByProvince(NumberProvinces, 2); // province by sex

PROC SEX

	inc(SexCountsByProvince(PROVINCE, SEX));

PROC DISPLAY_COUNTS

	do numeric counter = 1 while counter <= length(SexCountsByProvince, 1)
		errmsg("Province %d has %d males and %d females", counter,
			SexCountsByProvince(counter, 1), SexCountsByProvince(counter, 2));
	enddo;
</logic>


<seealso arrays.hgt numeric_statement.hgt alpha_statement.hgt string_statement.hgt saved_arrays_file_sva.hgt />
