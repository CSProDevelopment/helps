<title>Recode Statement</title>

<i>(Prior to CSPro 7.4, a <link recode_statement_pre74.hgt>different version</link> of the recode/box command function existed. That version should no longer be used as it will be removed in a future release.)</i>


<subheader>Format</subheader>

<logicsyntax>
recode <arg>expression1</arg> 『:: <arg>expression2</arg> :: <arg>expressionN</arg>』 -> <arg>destination_variable</arg>;
       『<arg>value1</arg>』   『:: <arg>value2</arg>       :: <arg>valueN</arg>』     => <arg>result</arg>;
                                                   『=> <arg>else_result</arg>;』
endrecode;
</logicsyntax>


<subheader>Description</subheader>

The <logiccolor>recode</logiccolor> statement assigns a value to a variable based on the value of one or more other variables. It can be used to rescale variables, to assign values to variables, or to create a composite variable from existing variables. It works like multiple <link if_statement.hgt>if statements</link> but is easier to use.

One or more expressions, <arg>expression1</arg> to <arg>expressionN</arg>, are given, with each expression separated by two colons <b>::</b>. These expressions must evaluate to either a number or string. Based on the values of each expression, CSPro evaluates each line between the <logiccolor>recode</logiccolor> and <logiccolor>endrecode</logiccolor>, trying to match a line's values, <arg>value1</arg> to <arg>valueN</arg>, with the evaluated expressions. Once a line matches, a <arg>result</arg>, which is given after the arrow <b>-></b>, is assigned to the <arg>destination_variable</arg>, which can be a dictionary item, working variable, array, list, or the return value of a user-defined function. A recode statement can have any number of expressions but can have only one destination variable. The destination variable can also be included among the expressions.

Each value provided must evaluate to the same type (number or string) as its respective expression, and each <arg>result</arg> must be the same type as the <arg>destination_variable</arg>. A value omitted is considered a match, and if no values are provided, then the optional <arg>else_result</arg> is used in the assignment (assuming no preceding line matched).

Values can be provided in the following ways:

<list>
	<li>An individual value. For example: <logiccolor>50</logiccolor></li>
	<li>Using the syntax of <link in_operator.hgt>in lists</link>, meaning that multiple values can be separated with commas and ranges be separated by colons. For example: <logiccolor>1,3,5:9</logiccolor></li>
	<li>An individual value preceded by one of the following operators: &lt;, &lt;=, &gt;, &gt;=, =, &lt;&gt;. If such an operator is used, the expression's value is compared with the value using the operator. For example: <logiccolor>&gt;= 65</logiccolor></li>
</list>


<subheader>Example 1</subheader>

<logic>
recode AGE   -> AGE_GROUP;
        0:19 -> 1;
       20:29 -> 2;
       30:39 -> 3;
       40:49 -> 4;
       >= 50 -> 5;
             -> 9;
endrecode;
</logic>


<subheader>Example 2</subheader>

<logic>
PROC AGE

	numeric valid_age_difference_with_head;

	recode RELATIONSHIP :: AGE(1) - AGE -> valid_age_difference_with_head;
		   3, 4			:: <  12 		-> false; // biological and step children must be 12+ years younger
		   6 			:: > -12 		-> false; // parents must be 12+ years older
		   7 			:: <  24 		-> false; // grandchildren must be 24+ years younger
										-> true;
	endrecode;
</logic>


<subheader>Example 3</subheader>

<logic>
function string GetDisplayName()

	recode NAME -> GetDisplayName;
		   ""	-> "(Undefined)";
				-> strip(toupper(NAME));
	endrecode;

end;
</logic>


<seealso if_statement.hgt when_statement.hgt />
