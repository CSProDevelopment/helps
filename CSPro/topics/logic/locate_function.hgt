<title>Locate Function</title>

<subheader>Format</subheader>

<logicsyntax>
b = locate(<arg>dictionary_name</arg>,<arg>relational_operator</arg>,<arg>key_prefix</arg>);
</logicsyntax>

<subheader>Description</subheader>

The <logiccolor>locate</logiccolor> function finds, but does not load, a case in a data file that matches a specified condition. The function searches the index of a file and finds the first case that matches the specified condition. The case pointer is positioned to the case's location, but the case is not loaded into memory. To load the case into memory, use the the <logiccolor>retrieve</logiccolor> function or the <logiccolor>loadcase</logiccolor> function without parameters.

The <arg>dictionary_name</arg> refers to either an external dictionary or the main input file of a batch application. If referencing the main input file of a batch application, you must run your program in <link run_production_batch_edits.hgt>indexed order</link>.

The <arg>relational_operator</arg> is one of the following: =, &lt;, &lt;=, &gt;, or &gt;=.

The string expression <arg>key_prefix</arg> specifies the condition to use when searching for cases. Cases with a <link key_function.hgt>key</link> that begins with or equals the <arg>key_prefix</arg> are considered eligible cases. If the relational operators are &lt; or &lt;=, then the file is positioned at the case with the largest key which satisfies the condition. If the relational operators are &gt; or &gt;=, then the file is positioned at the case with the smallest key which satisfies the condition.

<subheader>Return Value</subheader>

The function returns a logical value of 1 (true) if a case is found and 0 (false) otherwise.

<subheader>Example</subheader>

<logic>
if locate(SURVEY_DICT,>=,"55") then

	do while loadcase(SURVEY_DICT) and PROVINCE = 55
		// process all cases in province 55
	enddo;

endif;
</logic>

<seealso find_function.hgt set_first_statement.hgt set_last_statement.hgt retrieve_function.hgt loadcase_function.hgt />
