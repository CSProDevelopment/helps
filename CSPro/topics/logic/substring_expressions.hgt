<title>Substring Expressions</title>

<subheader>Format</subheader>

<logicsyntax>
<arg>string_variable</arg>[<arg>start_index</arg>:<arg>string_length</arg>]
</logicsyntax>

<subheader>Description</subheader>

A substring expression lets you extract a part (substring) of a string. The <arg>start_index</arg> gives the starting character position of the substring within the string, and <arg>string_length</arg> gives the number of characters to include in the substring, including the starting character. If <arg>string_length</arg> is not given, then it is assumed to be to the end of the originating string. A negative <arg>start_index</arg> leads to the basing of the substring from the end of the string.

<subheader>Example 1</subheader>

Suppose the variable <logiccolor>STR</logiccolor> has the value <logiccolor>"ABCDEF"</logiccolor>:

<logic>
STR[1]     "ABCDEF"
STR[3:1]   "C"
STR[3]     "CDEF"
STR[2:3]   "BCD"
STR[5]     "EF"
STR[4:7]   "DEF"
STR[-2]    "EF"
STR[-4:2]  "CD"
</logic>

Both <arg>start_index</arg> and <arg>string_length</arg> can be numeric expressions as well as constants. For example, to obtain the last 3 characters of <logiccolor>STR</logiccolor> you could use the expression:

<logic>
STR[length(STR) - 2:3]
</logic>

In this example, if <logiccolor>STR</logiccolor> is not at least two characters long, you may get unexpected results. You could also write the above as:

<logic>
STR[-3]
</logic>

<subheader>Example 2</subheader>

Likewise, substring expressions can be performed on string arrays. Suppose the string array <logiccolor>crop</logiccolor> had the following definition:

<logic>
PROC GLOBAL

array string crop(5); // 5 crop names

PROC MY_PROGRAM

preproc

	crop(1) = "maize";
	crop(2) = "wheat";
	crop(3) = "rice";
	crop(4) = "potatoes";
	crop(5) = "legumes";
</logic>

The following substring expressions would yield the results as shown:

<logic>
crop(1)[2]    "aize"
crop(1)[3:1]  "i"
crop(2)[3]    "eat"
crop(3)[2]    "ice"
crop(4)[5]    "toes"
crop(5)[1:3]  "leg"
</logic>
