<title>Recode Statement</title>

<i>(Prior to CSPro 7.4, a <link recode_statement_pre74.csdoc>different version</link> of the recode/box command function existed. That version should no longer be used as it will be removed in a future release.)</i>


<subheader>Format</subheader>

<logicsyntax>
recode <arg>expression1</arg> 『:: <arg>expressionN</arg>』 -> <arg>destination_variable1</arg> 『:: <arg>destination_variableN</arg>』;
       <arg>value1</arg>      『:: <arg>valueN</arg>』      -> <arg>result1</arg>               『:: <arg>resultN</arg>』;
                                   『-> <arg>else_result1</arg>          『:: <arg>else_resultN</arg>』;』
endrecode;
</logicsyntax>


<subheader>Description</subheader>

The <logiccolor>recode</logiccolor> statement assigns a value to one or more output variables based on the value of one or more other input variables. It can be used to rescale variables, to assign values to variables, or to create a composite variable from existing variables. In many instances it is easier to use than writing multiple <link if_statement.csdoc>if statements</link>.

One or more expressions, <arg>expression1</arg> to <arg>expressionN</arg>, are given, with each expression separated by two colons <b>::</b>. These expressions must evaluate to either a number or string. Based on the values of each expression, CSPro evaluates each line between the <logiccolor>recode</logiccolor> and <logiccolor>endrecode</logiccolor>, trying to match a line's values, <arg>value1</arg> to <arg>valueN</arg>, with the evaluated expressions. Once a line matches, one or more results, <arg>result1</arg> to <arg>resultN</arg>, which are given after the arrow <b>-></b>, are assigned to <arg>destination_variable1</arg> to <arg>destination_variableN</arg>, which can be dictionary items, working variables, array values, list values, or the return values of a user-defined function. A destination variable can also be included among the expressions. It is possible to declare a new <logiccolor>numeric</logiccolor>, <logiccolor>alpha</logiccolor>, or <logiccolor>string</logiccolor> destination variable as part of the recode statement (see Example 2 below).

Each value provided must evaluate to the same type (number or string) as its respective expression, and each result must be the same type as the destination variable. A value omitted is considered a match, and if no values are provided, then the optional <arg>else_result1</arg> to <arg>else_resultN</arg> are used in the assignment (assuming no preceding line matched).

Values can be provided in the following ways:

<list>
	<li>An individual value. For example: <logiccolor>50</logiccolor></li>
	<li>Using the syntax of <link in_operator.csdoc>in lists</link>, meaning that multiple values can be separated with commas and ranges be separated by colons. For example: <logiccolor>1, 3, 5:9</logiccolor></li>
	<li>An individual value preceded by one of the following operators: &lt;, &lt;=, &gt;, &gt;=, =, &lt;&gt;. If such an operator is used, the expression's value is compared with the value using the operator. For example: <logiccolor>&gt;= 65</logiccolor></li>
</list>


<subheader>Example 1</subheader>

<logic>
recode AGE   -> AGE_GROUP;
        0:19 -> 1;
       20:29 -> 2;
       30:39 -> 3;
       40:49 -> 4;
       >= 50 -> 5;
             -> 9;
endrecode;
</logic>


<subheader>Example 2</subheader>

<logic>
PROC AGE

	recode RELATIONSHIP :: AGE(1) - AGE -> numeric valid_age_difference_with_head;
		   3, 4			:: <  12 		-> false; // biological and step children must be 12+ years younger
		   6 			:: > -12 		-> false; // parents must be 12+ years older
		   7 			:: <  24 		-> false; // grandchildren must be 24+ years younger
										-> true;
	endrecode;
</logic>


<subheader>Example 3</subheader>

<logic>
function string GetDisplayName()

	recode NAME -> GetDisplayName;
		   ""	-> "(Undefined)";
				-> strip(toupper(NAME));
	endrecode;

end;
</logic>


<subheader>Example 4</subheader>

<logic>
recode INDUSTRY_SECTION -> min_division :: max_division;
				    "A" ->            1 ::  3;
					"B" -> 		      5 ::  9;
					"C" -> 			 10 :: 33;
					// ...
endrecode;
</logic>


<seealso if_statement.csdoc when_statement.csdoc />
