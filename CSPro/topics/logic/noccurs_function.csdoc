<title>NOccurs Function</title>

<subheader>Format</subheader>

<logicsyntax>
i = noccurs(group);
</logicsyntax>

<subheader>Description</subheader>

The noccurs function returns the number of occurrences of a roster, form, or record. It is equivalent to the <link count_function.csdoc>count</link> function without the where phrase.

<b>During data entry</b>, you may determine the current occurrence of a roster or form. The occurrence value is updated after the first entry into the first field. If the <b>noccurs</b> function is executed prior to the roster or form it specifies, then it returns <logiccolor>0</logiccolor>, as the field is <link data_entry_path.csdoc>off-path</link>. If it is executed from a field within the roster or form, it returns the current occurrence number once the first field is <link data_entry_path.csdoc>on-path</link>.

For example, its value in the <link preproc_statement.csdoc>preproc</link> of the first occurrence of the first item entered in a form or roster is zero (<logiccolor>0</logiccolor>), as the field is off-path. After entry of that first field noccurs will return one (<logiccolor>1</logiccolor>), as the field is now on-path. This situation will be true for the first field of each occurrence, as the noccurs function is not incremented until logic has passed to the postproc of that first field on the roster or form. If noccurs is executed after the form or roster, it returns the total number of occurrences in the form or roster. See the example below for more information.

If the form does not repeat, noccurs will return 1 (a roster must always repeat). When used within data entry, noccurs and <link soccurs_function.csdoc>soccurs</link> functions are the same.

<b>During batch editing</b>, noccurs always returns the total number of occurrences in the group.

<subheader>Return value</subheader>

The function returns the number of occurrences as an integer value.

<subheader>Example</subheader>

<logic>
PROC GLOBAL
numeric tot_persons;

// === PERSON_FORM is a non-repeating form that contains the PERSON_ROSTER

PROC PERSON_FORM
preproc
    tot_persons = noccurs(PERSON_ROSTER);
    // noccurs will return 0, as the roster has not yet been entered

PROC PERSON_ROSTER
preproc
    tot_persons = noccurs(PERSON_ROSTER);
    // noccurs will return 0, as the first field has not been entered

postproc
    tot_persons = noccurs(PERSON_ROSTER);
    // roster entry is now over, noccurs will return the total # of persons keyed

// === ROW_NUMBER is the first field in PERSON_ROSTER

PROC ROW_NUMBER
preproc
    tot_persons = noccurs(PERSON_ROSTER);
    // noccurs will return one less than the row the cursor is on,
    // as the field is not yet on-path. This means that if:

    // - this is the first row of the roster, noccurs will return 0
    // - this is the second row of the roster, noccurs will return 1
    // - noccurs will continue to return 1 less than the occurrence,
    //   as noccurs has not yet incremented its counter

postproc
    // NOW noccurs will return a non-zero number that corresponds
    // to the row (occurrence) number, as the field is finally on-path
    tot_persons = noccurs(PERSON_ROSTER);

// === NAME is the second field in PERSON_ROSTER

PROC NAME
preproc
    tot_persons = noccurs(PERSON_ROSTER);
    // this will always return a value equal to the curocc(), for
    // this and all subsequent fields in the roster

postproc
    tot_persons = noccurs(PERSON_ROSTER);
    // this will also always return a value equal to the curocc()
</logic>

<seealso Totocc_Function.csdoc Curocc_Function.csdoc Soccurs_Function.csdoc Count_Function.csdoc data_entry_path.csdoc />
