<title>timestamp Function</title>


<subheader>Format</subheader>

<logicsyntax>
d = timestamp();
d = timestamp(<arg>rfc3339_string</arg>);
d = timestamp(<arg>year</arg>, <arg>month</arg>, <arg>day</arg>『, <arg>hour</arg>, <arg>minute</arg>, <arg>second</arg>, utcOffset := <arg>offset</arg>』);
</logicsyntax>


<subheader>Description</subheader>

The <logiccolor>timestamp</logiccolor> function returns the <link https://en.wikipedia.org/wiki/Unix_time>UNIX time</link>, which is the number of seconds that have elapsed since January 1, 1970 in Coordinated Universal Time (UTC). This value is used by many computer programs and is thus useful for storing times as well as calculating timespans. Because the time is in UTC, it eliminates the need to worry about time zones when working with times.

The first version of the function returns a timestamp for the current time according to a device's clock. The value is as accurate as the device's clock.

The second version of the function takes a string expression, <arg>rfc3339_string</arg>, that represents a date in <link https://www.rfc-editor.org/rfc/rfc3339>RFC 3339</link> format. Dates specified in <link https://en.wikipedia.org/wiki/ISO_8601>ISO 8601</link> format can also be used by this version. The string is parsed with the timestamp representing the string returned.

The third version returns the timestamp for a date specified using numeric expressions for the <arg>year</arg>, <arg>month</arg>, and <arg>day</arg>. The <arg>hour</arg>, <arg>minute</arg>, and <arg>second</arg> can also be specified. Using <link function_named_arguments.csdoc>named arguments</link>, you can specify a time zone offset. If not specified, the time zone of the device is used, so to calculate a timestamp in UTC, you must specify: <logiccolor>utcOffset := 0</logiccolor>.


<subheader>Return Value</subheader>

The function returns the UNIX time as a decimal value. The integer part of this value is the number of elapsed seconds, while the decimal part contains the milliseconds. If there was an error parsing the RFC 3339 string, or the date values provided, the function returns <logiccolor>default</logiccolor>.

If you wish to store a timestamp in a fixed-width numeric variable, the variable should have an integer length of 10 and a decimal length of 3 (for a total length of 13 without a decimal character, or 14 with one).


<subheader>Example 1</subheader>

<logic>
PROC GLOBAL

numeric surveyStartTime;

PROC CROPS_QUEST

preproc

	surveyStartTime = timestamp();

	// if the survey began at 10:58pm on 12/28/2021 EST,
	// the UTC time (in seconds) would be 1640750243

	errmsg("Survey Start Time = %d", surveyStartTime);

postproc

	SURVEY_DURATION = timestamp() - surveyStartTime;
</logic>


<subheader>Example 2</subheader>

<logic>
// the Olympics 2008 opening ceremony was held on:
// - August, 8, 2008, at 8:00 pm (China Standard Time)
numeric timestamp_from_rfc3339 = timestamp("2008-08-08T12:00:00+00:00");
numeric timestamp_from_date = timestamp(2008, 8, 8, 20, utcOffset := 8);
</logic>


<seealso timestring_function.csdoc systime_function.csdoc sysdate_function.csdoc filetime_function.csdoc synctime_function.csdoc />
