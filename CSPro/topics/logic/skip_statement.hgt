<title>Skip Statement</title>

<subheader>Formats</subheader>

<logicsyntax>
skip 『to』 <arg>field_name</arg>;

skip 『to』 next 『<arg>multiply_occurring_field_name</arg>』;

skip;
</logicsyntax>

<subheader>Description</subheader>

The <logiccolor>skip</logiccolor> statement skips to the a field located after the current field. The argument <arg>field_name</arg> is either the name of a field or is a string variable specifying the name of the field. If the field has multiple occurrences, and if skipping from a field not on the same repeating form or roster, the target occurrence number must be specified to skip to the correct occurrence.

The <logiccolor>next</logiccolor> keyword skips to the next occurrence of <arg>multiply_occurring_field_name</arg>. If the target field is on the same repeating form or roster as the current field, control will move to the next occurrence of the target field. If not, control will move to the first occurrence of the target field. Occurrence numbers cannot be used with the <logiccolor>next</logiccolor> keyword.

When using the <logiccolor>next</logiccolor> keyword without the optional target field, control passes to the next occurrence of the current repeating form or roster, with the target field as the first field in that form or roster. This is a useful way to skip to the beginning of the next occurrence.

If using <logiccolor>skip</logiccolor> without specifying a target field, then control passes to the next field in the application. This targetless skip can only occur in the <logiccolor>preproc</logiccolor> of a field, roster, form, or user-defined function. CSPro will automatically figure out what the target field should be, as it does with an <logiccolor>ask</logiccolor> statement.

The target field can be located in any record at the same level as the current field, but it cannot be located at a different level. The field must be later on the path than the current field, meaning that it is a field that has not yet been entered. If the field has already been entered, an error message will be displayed during data entry. If you do not know whether the field is earlier in the data path, use the <logiccolor>move</logiccolor> statement.

When a skip statement is executed, the <logiccolor>preproc</logiccolor> of the target field will be executed but none of the statements between the <logiccolor>skip</logiccolor> statement and the <logiccolor>preproc</logiccolor> of the target field will be executed. Skipped fields are assigned the special value of <logiccolor>notappl</logiccolor>.

Note that the <logiccolor>skip</logiccolor> statement behaves differently from the <logiccolor>advance</logiccolor> statement, skipping <i>past</i> some number of fields, rather than moving <i>over</i> the fields.

<subheader>Example 1</subheader>

<logic>
PROC ATTENDED_SCHOOL_YN

	if ATTENDED_SCHOOL_YN = 2 then
		skip to REASON_NEVER_ATTEND;
	endif;
</logic>

<subheader>Example 2</subheader>

<logic>
PROC CHILDREN_EVER_BORN

preproc

	if SEX = 1 or AGE < 12 then
		skip to next;
	endif;
</logic>

<subheader>Example 3</subheader>

<logic>
PROC MARRIAGE_AGE

preproc

	if MARITAL_STATUS = 1 then
		skip;
	endif;
</logic>

<seealso advance_statement.hgt ask_statement.hgt move_statement.hgt reenter_statement.hgt />
