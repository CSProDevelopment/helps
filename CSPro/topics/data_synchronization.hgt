<title>Synchronization File (.pnc)</title>

<i><b>Feature Upgrade</b>: Starting with CSPro 7.0, you should no longer use synchronization scripts, as they will soon be removed from CSPro. To replicate the behavior of the scripts, you must use the <logiccolor>syncconnect</logiccolor>, <logiccolor>syncfile</logiccolor>, and <logiccolor>syncdisconnect</logiccolor> functions.</i>

<subheader>Overview</subheader>

CSPro synchronization scripts, with the file extension .pnc, allow for the transfer of data and programs back and forth between Android devices and remote machines. You can transfer data by using an FTP server, via a Dropbox account, or to another Android device by using Bluetooth. Multiple synchronization scripts can exist on a device, and you will have to determine the paradigm under which you would like to have your interviewers synchronize data and programs. For example, one synchronization script could update all survey instruments on the Android device and another script could send collected data to the server. Alternatively, one script could be used for both tasks.

Synchronization scripts can be executed in two ways:

<list>
	<li>A script can be run by calling the <logiccolor>sync</logiccolor> function in logic. This allows advanced programmers to setup dynamic synchronization scripts and to control when they are executed.</li>
	<li>Synchronization scripts can be retrieved and executed manually. Once retrieved from a server, synchronization files are stored in the CSEntry "sandbox," meaning that they are safe from other applications and are unable to be viewed by your interviewers (with the rare exception of interviewers using rooted devices). If you make changes to the synchronization script, you must have your interviewers retrieve the synchronization file again. Although synchronization makes updating applications and data easy, it is important to ensure that your synchronization script is comprehensive and complete before distributing it.</li>
</list>

There is no tool that comes with CSPro that you can use to edit your scripts, but you can create and edit them in a text editor such as Notepad.


<subheader>File Format</subheader>

<indent><font monospace>
<b>[SyncFile]</b>~!~
<b>Version</b>=CSPro <definition version />~!~
<b>AppName</b>=optional application name~!~
<b>Description</b>=optional description of the synchronization script~!~
<b>RootFolder</b>=optional path on the Android device from which CSEntry bases the sync~!~
<b>DeviceName</b>=optional name for the device in a Bluetooth server sync~!~~!~
<b>[Connection]</b>~!~
&lt;parameters described below&gt;~!~~!~
<b>[Sync]</b>~!~
<b>CreateClientPath</b>=directory to be created on the Android device~!~
<b>ClientPath</b>=directory on the Android device to move to~!~~!~
<b>Put</b>=file to upload from the Android device to the server~!~~!~
<b>CreateServerPath</b>=directory to be created on the server~!~
<b>ServerPath</b>=directory on the server to move to~!~~!~
<b>Get</b>=file to download from the server to the Android device~!~
</font></indent>

When processing a synchronization file, CSEntry first attempts to create a successful connection. If successful, the steps of the synchronization script are executed sequentially, in a similar fashion to a batch file or shell script.

The <b>CreateClientPath</b> and <b>CreateServerPath</b> statements are similar to a mkdir (make directory) command. If the folder already exists, then no folder will be created.

The <b>ClientPath</b> and <b>ServerPath</b> statements are similar to a cd (change directory) statement. Synchronization will fail if a folder does not exist, so if you are not sure that a folder exists, be sure to create it before moving to that directory.

In the <b>Get</b> and <b>Put</b> statements, you can use the ? and * wildcards. The Get and Put statements will always download or upload files, regardless of whether the files have been updated on the server or on the device.


<subheader>Replacement Parameters</subheader>

In any statement, you can use a few replacement parameters:

<list>
	<li><b>%AppName%</b>: the application name optionally defined in the synchronization header</li>
	<li><b>%Date%</b>: the date, in "year-month-day" (without hyphens) format, that the synchronization script occurred, using the Android device's clock</li>
	<li><b>%DateTime%</b>: the date and time, in "year-month-day-hour-minute-second" (without hyphens) format, that the synchronization script occurred, using the Android device's clock</li>
	<li><b>%DeviceID%</b>: the device ID, which corresponds to the value that is returned by the <logiccolor>getdeviceid</logiccolor> function</li>
	<li><b>%UID%</b>: the user ID, which corresponds to the value that is returned by the <logiccolor>getusername</logiccolor> function</li>
</list>


<subheader>Changing the Root Folder</subheader>

By default, the synchronization script starts processing from the &lt;external storage&gt;/csentry/ folder on your device. Executing a statement such as "ClientPath=/Data" will attempt to move to the &lt;external storage&gt;/csentry/Data folder, as all paths are based off of the csentry folder. If you would like to override this behavior, you can specify a different root folder using the RootFolder attribute. The following four examples execute in the same manner:

<indent><table 2>
	<cell>
	<font monospace>
[SyncFile]
... 
[Sync]
Put=/Data/BHIC.dat
~!~
[SyncFile]
... 
RootFolder=/ 
[Sync]
Put=/storage/emulated/0/csentry/Data/BHIC.dat	
	</font>
	</cell>
	<cell>
	<font monospace>
[SyncFile]
...
[Sync]
ClientPath=/Data
Put=BHIC.dat~!~
[SyncFile]
...
RootFolder=/storage/emulated/0/csentry/Data
[Sync]
Put=BHIC.dat
	</font>
	</cell>
</table></indent>


<subheader>FTP Synchronization</subheader>

When connecting with an FTP server, the Connection section must contain the following attributes:

<indent><font monospace>
[Connection]
Type=FTP
Host=ftp://...
Username=FTP user name
Password=FTP password
</font></indent>

If the FTP server that you are connecting to has Transport Layer Security or Secure Sockets Layer protections, then you can specify the protocol with one of the following statements:

<indent><font monospace>
SSLTLS=Implicit (for FTPS)
SSLTLS=Explicit (for FTPES)
</font></indent>

<seealso ftp_synchronization_examples.hgt />


<subheader>Dropbox Synchronization</subheader>

When connecting with Dropbox, the Connection section must contain the following attributes:

<indent><font monospace>
[Connection]
Type=Dropbox
</font></indent>

When CSEntry attempts to connect to Dropbox, you will get a prompt where you can enter your Dropbox username and password.

<seealso dropbox_synchronization_examples.hgt />


<subheader>Bluetooth Synchronization</subheader>

A Bluetooth synchronization occurs between two Android devices. One device acts as a "server" and the other acts as a "client." The server has no intelligence, and it is the client's responsibility to get and put the appropriate files. A device could be a server during one synchronization and the client during the next. The Connection section for the Bluetooth server must contain the following attributes:


<indent><font monospace>
[Connection]
Type=BluetoothServer
</font></indent>

As mentioned in the File Format section above, it is also possible to set a Bluetooth name that the server will use while broadcasting as it waits for connections. If no name is specified, then the synchronization will broadcast using the Android device's Bluetooth name.

The Connection section for the Bluetooth client must contain the following attributes:

<indent><font monospace>
[Connection]
Type=Bluetooth
DeviceName=optional name of the Bluetooth server that the client is connecting to
</font></indent>

If the DeviceName is left off of a Bluetooth client sync, then CSEntry will display a list of nearby Bluetooth devices that are broadcasting and allow the interviewer to select the device to which they want to connect.

When a Bluetooth synchronization begins, the user of the device acting as a server will have to respond to a warning indicating that their Bluetooth credentials will be broadcast. After accepting this, the Bluetooth client will be able to connect to the server.

<seealso bluetooth_synchronization_examples.hgt />


<subheader>Synchronization Files on Android Devices</subheader>

To download a synchronization file to an Android device, select the Synchronize option on the menu while in the <link android_navigation.hgt>Entry Applications screen</link>. If any synchronization scripts have already been downloaded, they will be displayed here. Clicking on a script will launch the synchronization process. Alternatively, you can select "Add new" to add a new script. In this case, you will be presented with a list of three places where scripts can be found: on Dropbox, on an FTP server, or on the Android device storage.

<list>
	<li>If selecting Dropbox, you will be asked to validate your Dropbox credentials and authorize CSEntry to access your files.</li>
	<li>When entering FTP credentials, you must enter a host, username, and password.</li>
</list>

Once a connection has been made, CSEntry will display a list of files and folders on the Dropbox account, FTP server, or device storage. You can navigate into subfolders by clicking on a folder icon. You can visit a parent folder by selecting the up arrow icon that appears to the right of path that is currently displayed. In addition to folders, two kinds of files will be displayed:

<list>
	<li><link program_information_file_pff.hgt>.pff file</link>: If you click on a .pff file, CSEntry will automatically create a synchronization script based on the parameters described in the .pff file. This only works for basic data entry applications. If you use features such as lookup files, then this approach will generally not work as expected.</li>
	<li>.pnc file: If you click on a .pnc file, CSEntry will download the custom synchronization script.</li>
</list>

Selecting either a .pff or a .pnc file will create or retrieve the synchronization script and place it in the CSEntry sandbox. It does not execute the script described in the file. After the download, you will have the option to select the script if you want to execute the synchronization.

To delete a synchronization script, hard-press on the name after clicking on Synchronize. You will have the option to delete the script. Alternatively, if you select "Add new" and download a file with the same name as a previously downloaded file, it will overwrite the previous synchronization script.
