<title>File.readLines Action</title>


<subheader>Format</subheader>

<logicsyntax>
s = CS.File.readLines(<arg>path</arg> := ...『, <arg>encoding</arg> := ...』))
</logicsyntax>

<indent><table 3 header nowrap>
    <cell>Argument</cell><cell>Description</cell><cell nowrap>Types / Required</cell>
    <cell><arg>path</arg></cell><cell>The path of the file to read.</cell><cell>string~!~required</cell>
    <cell><arg>encoding</arg></cell><cell>The <link unicode_primer.csdoc>encoding</link> to use to decode the file's text.~!~The default value is <logiccolor>"UTF-8"</logiccolor>.</cell><cell>string~!~not required</cell>
</table></indent>


<subheader>Description</subheader>

The <action>File.readLines</action> <link action_invoker.csdoc>action</link> reads a file, specified as <arg>path</arg>, as text, returning the entire file's content as an array of strings. The file's content is split on newline characters, with each line returned as an element of the array without the newline character included.

<include include_encoding_input.hgi />


<subheader>Return Value</subheader>

The action returns an array of strings containing the file's content, with each line as an entry in the array.


<subheader>Exceptions</subheader>

The action throws an exception if any of its arguments are not specified in a valid form or if the file does not exist or cannot be read.


<include include_lines_example.hgi />


<seealso CS_File.csdoc CS_File_writeLines.csdoc CS_File_readBytes.csdoc CS_File_readText.csdoc File_read_function.csdoc />
