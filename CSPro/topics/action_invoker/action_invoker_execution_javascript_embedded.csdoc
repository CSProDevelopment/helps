<title>Action Invoker Execution from Embedded JavaScript</title>


<subheader>Overview</subheader>

Running <link action_invoker.csdoc>Action Invoker</link> actions from <link CSCode::language_javascript.csdoc>JavaScript</link> requires calling static methods contained in an object, <logiccolor>CS</logiccolor>, that is automatically added to the global scope. Each Action Invoker namespace is an object of <logiccolor>CS</logiccolor>, with its actions available as static methods in two forms:

<list>
    <li><b>Synchronous</b>: Use the action name.</li>
    <li><b>Asynchronous</b>: Use the action name followed by <i>Async</i>. These methods return a <link "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</link> to run the action (even though these actions are not actually run in a separate thread).</li>
</list>

If applicable, an action's arguments are specified by passing an object to the method with the arguments defined by using the action's argument names as the object's properties. For example, the following code puts the text <logiccolor>"CSPro"</logiccolor> onto the clipboard:

<color JavaScript>
CS.Clipboard.putText({
    text: "CSPro"
});
</color>


When calling actions asynchronously, you can use standard Promise handling, including <link "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining">chaining</link>. This example shows how to execute two actions asynchronously, first to read a <link data_entry_application_file_ent.csdoc>data entry application</link> and then to read its associated <link data_dictionary_file_dcf.csdoc>dictionary</link>.

<color JavaScript>
CS.File.readTextAsync({
    path: "Simple CAPI.ent"
})
.then((entryApplicationJson) => {
    const entryApplication = JSON.parse(entryApplicationJson);
    if( entryApplication.dictionaries !== undefined ) {
        return CS.File.readTextAsync({
            path: entryApplication.dictionaries[0].path
        });
    }
    else {
        throw new Error("The application does not have an associated dictionary.");
    }
})
.then((dictionaryJson) => {
    const dictionary = JSON.parse(dictionaryJson);
    console.log(`The dictionary name is ${dictionary.name}.`);
})
.catch((error) => {
    console.log(`There was an reading the application or dictionary: ${error}`);
});
</color>


<subheader>Argument Types</subheader>

Arguments to actions are specified in one of the <link JSON_primer.csdoc>JSON types</link>: string, number, boolean, array, or object. The help page for each action will list the type, or types, permitted for each argument.


<subheader>Return Values</subheader>

On successful execution, the result of an action is returned as undefined, or one of the JSON types: string, number, boolean, array, or object. On error, an exception is thrown.


<subheader>Exception Handling</subheader>

At runtime, if any of the arguments are invalid, or if there was an error executing the action, the Action Invoker throws an <link "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error">exception</link>. Each action's help page will indicate if the action throws exceptions. If so, you will want to wrap the action call in <link "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch">try/catch</link>, or add a <link "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch">catch method</link> when calling the action asynchronously.


<seealso action_invoker.csdoc action_invoker_execution_javascript_web.csdoc />
