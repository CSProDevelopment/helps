<title>Dictionary.getDictionary Action</title>


<subheader>Format</subheader>

<logicsyntax>
s = CS.Dictionary.getDictionary(<arg>name</arg> := ... ‖ <arg>path</arg> := ...)
</logicsyntax>

<indent><table 3 header nowrap>
    <cell>Argument</cell><cell>Description</cell><cell nowrap>Types / Required</cell>
    <cell><arg>name</arg></cell><cell>The name of a <link introduction_to_data_dictionary.csdoc>dictionary</link> associated with an application.</cell><cell>string~!~not required</cell>
    <cell><arg>path</arg></cell><cell>The path of a <link data_dictionary_file_dcf.csdoc>dictionary file</link> to read.</cell><cell>string~!~not required</cell>
</table></indent>


<subheader>Description</subheader>

The <action>Dictionary.getDictionary</action> <link action_invoker.csdoc>action</link> returns a dictionary associated with an application or loaded from the disk. One, and only one, of the arguments <arg>name</arg> or <arg>path</arg> must be provided.

If specifying <arg>name</arg>, you can also specify the name an <link data_entry_application_file_ent.csdoc>application</link> or <link forms_file_fmf.csdoc>form file</link>. When using an application name, the application's <link dictionary_types.csdoc>main</link> dictionary is returned. When using a form file name, the dictionary associated with the forms is returned.


<subheader>Return Value</subheader>

The action returns the dictionary.


<subheader>Exceptions</subheader>

The action throws an exception if any of its arguments are not specified in a valid form, or if:

<list>
    <li>No dictionary, or associated dictionary, exists with the specified name.</li>
    <li>The dictionary file does not exist or cannot be read.</li>
</list>


<subheader>Example (JavaScript)</subheader>

<color JavaScript>
// write to the console all of the item names along with their parent record
const dictionary = CS.Dictionary.getDictionary({
    path: "Census Dictionary.dcf"
});

dictionary.levels.forEach(level => {

    level.ids.items.forEach(item => {
        console.log(`ID: ${item.name}`);
    });

    level.records.forEach(record => {
        record.items.forEach(item => {
            console.log(`${record.name}: ${item.name}`);
        });
    });
});
</color>


<subheader>Example (CSPro Logic)</subheader>

<include include_questionnaire_view_example.hgi />


<seealso CS_Dictionary.csdoc CS_Application.csdoc />
