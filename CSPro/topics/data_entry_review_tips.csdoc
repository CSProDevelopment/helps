<title>Tips on Reviewing Data Entry Applications</title>

Here are some tips on reviewing a data entry application, including advice on best practices and warnings about common mistakes that people make when creating data entry applications.

<subheader>Data Dictionary</subheader>

<list ordered>
	<li>All dictionaries that make up your application should use the same zero fill and decimal character settings. You can check this using <link dictionary_analysis.csdoc>Dictionary Analysis</link>.</li>
	<li>Every numeric item should have a value set defining the range of values that can be entered into the field. A common mistake is to not declare a value set for a two-digit age field, but without a value set, ages like -5 can be entered. Although protected fields do not need value sets (because the operator will not enter a value into the field), it is still a good idea to add a value set so that this information about possible values is available to other users of the dictionary. You can use <link dictionary_analysis.csdoc>Dictionary Analysis</link> to identify items without a value set.</li>
	<li>For items with multiple value sets, make sure that the primary value set (the first one showing in the dictionary editor) is the value set with the complete list of codes. This value set is used to show labels in the case tree. If the item's value set is defined by cascading options, consider adding a generic value set as the primary value set rather than having one that potentially leads to incorrect labels based on the cascading conditions.</li>
</list>


<subheader>Form Design</subheader>

<list ordered>
	<li>Ensure that every field's <link capture_types.csdoc>capture type</link> is set to match the way that you want an operator to enter data for the field. As much as possible, prevent an operator from having to enter codes. For numeric fields, text boxes should generally only be used for values like age or currencies; you can use combo boxes for instances when an operator typically will type a value but can occasionally select a discrete code.</li>
	<li>Check for the consistency of field properties. For example, if the upper case setting is used for some fields, it should generally be used for all fields. Field properties can be standardized using the <link change_field_properties_for_multiple_fields.csdoc>Field Properties (for Multiple Fields)</link> dialog.</li>
	<li>All protected fields must be prefilled with a valid value; if not, CSEntry will terminate data collection. Make sure that all protected fields are filled in via logic or by using <link run_production_data_entry.csdoc>PFF parameters</link>.</li>
	<li>If an operator is never going to collect data directly for a given field, consider leaving it off the form. Items in a dictionary can be filled in using logic without needing to exist on a form. Alternatively, you can hide such fields from an operator using the <link change_field_properties.csdoc>Hide in Case Tree</link> field property.</li>
</list>


<subheader>Question Text</subheader>

<list ordered>
	<li>Make sure that every question has defined question text. Even for protected fields, it is a good idea, for completeness, to define question text.</li>
	<li>For multiply occurring questions, ensure that the minimum and maximum occurrences defined for a field's question text cover the whole range of occurrences. You can use the <link question_text_macros.csdoc>Harmonize Occurrences</link> functionality to ensure that the maximum occurrence values match the current dictionary settings.</li>
</list>


<subheader>Logic</subheader>

<list ordered>
	<li>Ensure that there is logic to check for acceptable values for fields without value sets. For example, you may want to ensure that operators enter proper alphanumeric responses for fields such as names and other/specifies.</li>
	<li>For alphanumeric text box and checkbox fields, you may want to ensure that a certain number of characters is entered or choices are selected.</li>
	<li>Review all <link errmsg_function.csdoc>hard checks</link> and <link warning_function.csdoc>soft checks</link> and think about what data respondents will be able to provide. You do not want operators to enter invalid data to bypass a hard check, so use soft checks for questions where some flexibility is allowable.</li>
	<li>When working with dynamic value sets or question text fills that are set via logic, make sure that any logic that is executed for such tasks on a multiply occurring field is in an <logiccolor>onfocus</logiccolor>, not <logiccolor>preproc</logiccolor>, event. If the logic is in the <logiccolor>preproc</logiccolor>, an error can occur as an operator moves backwards to a previous occurrence because the value set and question text will not be updated (because <logiccolor>preproc</logiccolor> events only occur as an operator moves forwards).</li>
	<li>Verify that fields that should have values are not skipped over. When using <link operator_vs_system_controlled.csdoc>system-controlled</link> mode, the values in skipped fields are deleted when a case is finalized. A common mistake is to prefill a field and then skip over it, which results in the data being lost when the case is finalized. In such instances, the field should be prefilled and then <link protect_function.csdoc>protected</link>, which will prevent the operator from modifying the value but ensuring that the data is maintained.</li>
	<li>A best practice is to minimize the use of unnamed constants throughout the application. For example, instead of coding <logiccolor>2020</logiccolor> as a year, declare <logiccolor>numeric CensusYear = 2020;</logiccolor> and then use <logiccolor>CensusYear</logiccolor> throughout the application. This makes the code clearer and also makes it easier to change your application when circumstances change.</li>
</list>


<seealso programming_standards.csdoc />
