<title>Define File Associations</title>
<context IDD_PIFDLG />

The <b>Define File Associations</b> dialog box is presented when a <b>CSBatch</b> application is executed. This page explains why certain files are asked of you. To find out more about the allowable <b>Source Type</b> options and what can be chosen, see <topic source_file_types_csbatch.hgt />.

<b>CSBatch</b> requires a minimum of two files to run (an Input Data File and a Listing File), although the minimum number of files you will be solicited for in the <b>Define File Associations</b> dialog is three (you optionally have the choice of specifying an Output Data File). The basic run dialog is shown below:

<image file_associations_batch_min.png />

<b>CSBatch</b> applications will require additional file definitions when one of the following situations occur: 

<list><li>1+ lookup files are used</li>
<li>the <link cspro::write_function.hgt>write</link> or <link cspro::freq_statement_unnamed.hgt>freq</link> functions are used</li>
<li>the <link cspro::impute_function.hgt>impute</link> function is used with the <logiccolor>stat</logiccolor> command, or <logiccolor>set impute(on)</logiccolor> is included</li>
<li>the <link cspro::array_statement.hgt>array</link> declaration is present with the <logiccolor>save</logiccolor> option</li>
</list>
If all of these features were used, the expanded <b>CSBatch</b> run dialog would appear as shown below (in actuality, you would have to scroll to see all expected files&mdash;the dialog has been spliced together to facilitate viewing). Note the file associations listed in the "Source Type" column&mdash;those are the default file types expected for each file, tho most all files allow more than one option to choose from. Also note that four of the data files provide default filenames, as explained further below.

<image file_associations_batch_full.png />

The following describes the files that will be solicited from you in more detail, in the order (more-or-less) presented in the dialog box (depending on the options chosen), and why each is needed. As mentioned at the top, to find out more about the allowable <b>Source Type</b> options and what can be chosen, see <topic source_file_types_csbatch.hgt />.

<subheader>Input Data</subheader>

This is the file that your program will run upon. For example, if your program contains a series of edits to be performed on your data files, this is your place to name those files. You can select a single input file or multiple input files. Rest assured, input data files are never altered&mdash;they will only be opened, read, and closed. Note you also have the option of not using any data file by selecting <link CSPro::data_sources.hgt>none</link> as your input data file. This could be useful, for example, when writing a utility application that merges selected fields from 2+ external (lookup) files, based on a very specific universe criteria.

<subheader>Output Data</subheader>

The Output Data file is where you can choose to write out the input data file. What you've done to the input data file (or not, if no edits took place), and what format you choose to write out the data will impact the resultant file(s).

Similar to the input file, you can specify <link CSPro::data_sources.hgt>none</link> as your output file. However in this scenario, not specifying an output file might be used when you are developing and debugging your program, as you might prefer to see what's going on through the use of <link cspro::errmsg_function.hgt>errmsg</link> function calls rather than reviewing edited data (these user-generated messages will be written to the Listing File).

If you have not made any edits to your input file in the batch application, then any files specified will be, essentially, a copy of the input file. This can be useful if your intent is to write out the input data file into other format(s), such as Excel, SAS, or SPSS; or if you wish to output selected records from your input data file, rather than the entire file. This is now possible starting with CSBatch version 7.7, which has <link source_file_types_csbatch.hgt>expanded the output feature</link> to allow exporting natively to other file formats.  

Finally, in the scenario where you have made a series of edits on the input file (remember the original input data file will never be modified), you will write out the edited file. You can also choose to specify more than one file, should you wish to export the edited data to more than one type of file format. For example, you may wish to continue working with <b>.csdb</b> files, but subject-matter staff may prefer reviewing the edited data using Excel.

<subheader>External Data (dict_name)</subheader>

For each lookup file included in your application, you will be asked to supply the data file to which the lookup dictionary refers. The name displayed within the parenthesis is the unique (internal) dictionary name. For each lookup file attached to your application, a separate line entry will appear for you to specify the associated data file. If the file does not exist, it will be created (it will be empty if a <link cspro::writecase_function.hgt>writecase</link> call is not made for the associated dictionary).

You also have the option to specify <link CSPro::data_sources.hgt>none</link> for your lookup file. This can be useful if you know what lookup files you plan to use in your application, you have defined the dictionaries, but you do not yet have the data files themselves ready to use.

<subheader>&lt;Write File></subheader>

If your program makes one or more <link cspro::write_function.hgt>write</link> function calls, <b>CSBatch</b> will ask you for the file to write them all to. This file will be a text file, regardless of the file extension used. If you fail to name a file, all <logiccolor>write</logiccolor> function text will be placed in the listing file.

<subheader>&lt;Listing File></subheader>

This file contains a summary of the results of your run and must be provided. It will tell you the input data file used, start and stop times, the number of records read, and how many had a "bad structure" (i.e., required records were missing). If there are any <link cspro::errmsg_function.hgt>errmsg</link> functions in your program, they will be written to this file after the summary information just described. As seen in both screenshots above, the default file name with extension will be <b>&lt;AppName>.lst</b>, but both can be changed by the user.

<subheader>&lt;Freq File></subheader>

If your program includes one or more <link cspro::freq_statement_unnamed.hgt>freq</link> function calls, <b>CSBatch</b> will ask you for the file to save these frequencies to. If you do not provide a file name, CSBatch will execute, but it will <b>not</b> generate an error message about the expected file being missing. As seen in the expanded dialog above, the default file extension will be <b>.txt</b>, though this can be changed by the user. Creating a CSPro table by using the <b>.tbw</b> source type is a good second choice.

<subheader>&lt;Impute Freq File></subheader>

If your program includes one or more <link cspro::impute_function.hgt>impute</link> function calls, <b>CSBatch</b> will ask you for the file to save these imputations to. If you do not provide a file name, CSBatch will run on your data, but you will receive an error message about the expected file being missing. As seen in the expanded dialog above, the default file name with extension will be <b>&lt;AppName>_impute_freq.lst</b>, but both can be changed by the user.

<subheader>&lt;Impute Stat Data></subheader>

If your program includes one or more <link cspro::impute_function.hgt>impute</link> functions that use the <logiccolor>stat</logiccolor> command, or if you include the <logiccolor>set impute(stat, on);</logiccolor> in your program, <b>CSBatch</b> will ask you for the name of a data file to save these imputation statistics to. As seen in the expanded dialog above, the default file name with extension will be <b>&lt;AppName>_impute_stat.csdb</b>, but both can be changed by the user.

<subheader>&lt;Save Array File></subheader>

If your program uses <link CSPro::array_statement.hgt>arrays</link>, you can choose to save the array values between program runs with the optional keyword <logiccolor>save</logiccolor>. When the save option is used, <b>CSBatch</b> will prompt you for a filename. By default the file has the same name as the application, with an <b>.sva</b> file extension. The leading portion of the file name can be changed, but the extension cannot.

<seealso source_file_types_csbatch.hgt /> 
